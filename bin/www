var app = require('../app');
var debug = require('debug')('ung-dung-mua-thuoc-truc-tuyen-pharmapoly:server');
var http = require('http');
const socketIo = require('socket.io');
const Chats = require('../models/chats');
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server (Render tự cấp SSL).
 */
var server = http.createServer(app);
//const io = socketIo(server);
const io = socketIo(server, {
  cors: {
    origin: "*", // Cho phép truy cập từ mọi nơi (có thể thay bằng domain cụ thể)
    methods: ["GET", "POST"]
  }
});
app.set('io', io);



let users = {}

io.on("connection", async (socket) => {
  console.log("Socket query:", socket.handshake.query);

  // xử lý kết nối của người dùng
  const userId = socket.handshake.query.userId;
  console.log("🔍 userId nhận được:", userId);

  if (!userId) {
    console.log(" Kết nối thất bại: Không có userId");
    socket.disconnect();
    return;
  }

  users[userId] = socket.id;
  console.log(`${userId} đã kết nối với socket ID: ${socket.id}`);

  const chat = await Chats.findOne(
    { user_id: userId },
    { _id: 0, "fullChat._id": 0 }
  );
  socket.emit("oldMessages", chat ? chat.fullChat : []);

  socket.on("sendMessage", async ({ senderId, receiverId, message }) => {
    console.log(`📩 Tin nhắn từ ${senderId} đến ${receiverId}: ${message}`);
    if (!message.trim()) return;

    const newMessage = {
      message,
      senderId: senderId,
      timestamp: new Date(),
    };
    let chat = await Chats.findOne({ user_id: senderId });
    if (!chat) {
      chat = new Chats({
        user_id: senderId,
        lastMessage: message,
        timeSentLastMessage: new Date(),
        sentBy: senderId,
        fullChat: [newMessage],
      });
    } else {
      chat.fullChat.push(newMessage);
      chat.lastMessage = message;
      chat.timeSentLastMessage = new Date();
      chat.sentBy = senderId;
    }

    await chat.save();

    socket.emit("messageSentSuccess", { status: "success", message: "Tin nhắn gửi thành công!", data: newMessage });
    if (receiverId === '67b344c3744eaa2ff0f0ce7d') {
      console.log(`📤 Đang gửi tin nhắn tới ${receiverId} qua socketId ${users[receiverId]}`);
      console.log(users);
      io.to(users[receiverId]).emit("receiveMessage", { status: "success", message: "Tin nhắn gửi thành công!", data: newMessage });
    }
  });

  socket.on("sendMessageByAdmin", async ({ adminId, userId, message }) => {
    console.log(`📩 Tin nhắn từ ${adminId} đến ${userId}: ${message}`);

    if (!message.trim()) return;

    const newMessage = {
      message,
      senderId: adminId,
      timestamp: new Date(),
    };

    let chat = await Chats.findOne({ user_id: userId });
    if (!chat) {
      chat = new Chats({
        user_id: userId,
        lastMessage: message,
        timeSentLastMessage: new Date(),
        sentBy: adminId,
        fullChat: [newMessage],
      });
    } else {
      chat.fullChat.push(newMessage);
      chat.lastMessage = message;
      chat.timeSentLastMessage = new Date();
      chat.sentBy = adminId;
    }

    await chat.save();

    socket.emit("messageSentSuccess", { status: "success", message: "Tin nhắn gửi thành công!", data: newMessage });

    if (users[userId]) {
      io.to(users[userId]).emit("receiveMessage", { status: "success", message: "Tin nhắn gửi thành công!", data: newMessage });
    }
  });

  socket.on("disconnect", () => {
    console.log("User disconnected:", socket.id);
    for (let userId in users) {
      if (users[userId] === socket.id) {
        delete users[userId];
        break;
      }
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, '0.0.0.0'); // Cho phép truy cập từ mọi nơi
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') throw error;
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Server running at http://0.0.0.0:${port}`);
}
