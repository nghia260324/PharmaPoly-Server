<style>
    .product-type-item {
        border: 1px solid #ddd;
        /* Viền cho item */
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 15px;
        background-color: #f9f9f9;
    }

    .product-type-header {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
        color: #333;
    }
</style>
<div class="container mt-3">
    <a href="" class="btn btn-secondary mb-4" id="backBtn">
        <i class="bi bi-arrow-left-circle"></i> Quay lại
    </a>
    <div class="modal-content">

        <div class="modal-header">
            <h5 class="modal-title" id="editProductModalLabel"><span data-lang="edit_product">Edit Product</span>
            </h5>
        </div>
        <div class="modal-body">
            <form id="editProductForm">
                <input type="hidden" id="editProductId">
                <div class="row">
                    <div class="col-md-6">
                        <!-- Product Name -->
                        <div class="mb-3">
                            <label for="editProductName" class="form-label"><span data-lang="product_name">Product
                                    Name</span></label>
                            <input type="text" class="form-control" id="editProductName" required>
                        </div>

                        <!-- Category -->
                        <div class="mb-3">
                            <label for="editProductCategory" class="form-label"><span
                                    data-lang="category">Category</span></label>
                            <select class="form-select" id="editProductCategory" required>
                                <option value="" selected disabled><span data-lang="select_category">Select
                                        Category</span></option><span data-lang="select_category">Select
                                    Category</span>
                                {{#each categories}}
                                <option value="{{this._id}}">{{this.name}}</option>
                                {{/each}}
                            </select>
                        </div>

                        <!-- Brand -->
                        <div class="mb-3">
                            <label for="editProductBrand" class="form-label"><span
                                    data-lang="brand">Brand</span></label>
                            <select class="form-select" id="editProductBrand" required>
                                <option value="" selected disabled><span data-lang="select_brand">Select
                                        Brand</span></option>
                                {{#each brands}}
                                <option value="{{this._id}}">{{this.name}}</option>
                                {{/each}}
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label"><span data-lang="product_types">Product Types</span></label>
                            <div class="table-responsive" style="max-height: 400px;">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Chọn loại sản phẩm</th>
                                            <th>Giá bán</th>
                                        </tr>
                                    </thead>
                                    <tbody id="productTypesTableBody">
                                        {{#each productTypes}}
                                        <tr>
                                            <td>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="{{this._id}}"
                                                        id="productType_{{this._id}}" data-name="{{this.name}}">
                                                    <label class="form-check-label" for="productType_{{this._id}}">
                                                        {{this.name}}
                                                    </label>
                                                </div>
                                            </td>
                                            <td>
                                                <div id="priceInput_{{this._id}}" class="d-none">
                                                    <input type="number" class="form-control" id="price_{{this._id}}"
                                                        name="price_{{this._id}}" placeholder="Nhập giá bán" min="1">
                                                </div>
                                            </td>

                                        </tr>
                                        {{/each}}
                                    </tbody>
                                </table>
                            </div>
                        </div>




                        <!-- Short Description -->
                        <div class="mb-3">
                            <label for="editProductShortDescription" class="form-label"><span
                                    data-lang="short_description">Short Description</span></label>
                            <textarea class="form-control" id="editProductShortDescription" rows="3"></textarea>
                        </div>

                        <!-- Specification -->
                        <div class="mb-3">
                            <label for="editProductSpecification" class="form-label"><span
                                    data-lang="specification">Specification</span></label>
                            <input type="text" class="form-control" id="editProductSpecification"
                                placeholder="Enter packaging details (e.g., Box of 10 blisters x 10 tablets)">
                        </div>

                        <!-- Manufacturer -->
                        <div class="mb-3">
                            <label for="editProductManufacturer" class="form-label"><span
                                    data-lang="manufacturer">Manufacturer</span></label>
                            <input type="text" class="form-control" id="editProductManufacturer"
                                placeholder="Enter the manufacturer's name">
                        </div>

                        <!-- Country of Origin -->
                        <div class="mb-3">
                            <label for="editProductOriginCountry" class="form-label"><span
                                    data-lang="country_of_origin">Country
                                    of Origin</span></label>
                            <input type="text" class="form-control" id="editProductOriginCountry"
                                placeholder="Enter the country of origin">
                        </div>


                        {{!-- <div class="mb-3" id="editProductStatusWrapper">
                            <label for="editProductStatus" class="form-label">
                                <span data-lang="product_status">Trạng thái sản phẩm</span>
                            </label>

                            <!-- Hiển thị nếu được phép chỉnh sửa -->
                            <select class="form-select" id="editProductStatus" required>
                                <option value="not_started" data-lang="not_started">Chưa bắt đầu bán</option>
                                <option value="active" data-lang="active">Đang bán</option>
                                <option value="paused" data-lang="paused">Tạm ngừng bán</option>
                                <option value="discontinued" data-lang="discontinued">Ngừng bán vĩnh viễn</option>
                            </select>

                            <!-- Chỉ hiện nếu là discontinued -->
                            <p id="readonlyProductStatus" class="form-control bg-light fw-semibold text-danger"
                                style="display: none;">
                                Ngừng bán vĩnh viễn
                            </p>
                        </div> --}}



                    </div>

                    <div class="col-md-6">
                        <!-- Sections -->
                        <div class="mb-3" id="editSectionContainer">
                            <label class="form-label"><span data-lang="section">Section</span></label>
                        </div>

                        <!-- Add Section Button -->
                        <div class="mb-3">
                            <button type="button" class="btn btn-outline-primary" id="editSectionBtn">
                                <i class="bi bi-plus-circle"></i> <span data-lang="add_section">Add Section</span>
                            </button>
                        </div>

                        <!-- Add Image Button -->
                        <div class="mb-3">
                            <label class="form-label"><span data-lang="product_images">Product Images</span></label>
                            <input type="file" id="editProductImages" accept="image/*" multiple hidden>
                        </div>

                        <!-- Image Preview Section -->
                        <div id="editImagePreview" class="gap-3">

                            <div style="display: inline-block;">
                                <button type="button"
                                    class="btn btn-outline-primary d-flex align-items-center justify-content-center"
                                    id="addImageBtn"
                                    style="width: 100%; aspect-ratio: 1/1; font-size: 24px; border-style: dashed; border-width: 2px;">
                                    <i class="bi bi-image-alt fs-1"></i>
                                </button>
                            </div>
                        </div>

                    </div>
                </div>

                <!-- Submit Button -->
                <button type="submit" class="btn btn-primary w-100 mt-4"><span data-lang="save_changes">Save
                        Changes</span></button>
            </form>
        </div>
    </div>

</div>




<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel"><span data-lang="confirm_deletion">Confirm
                        Deletion</span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><span data-lang="are_you_sure">Are you sure you want to delete this product?</span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><span
                        data-lang="cancel">Cancel</span></button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn"><span
                        data-lang="delete">Delete</span></button>
            </div>
        </div>
    </div>
</div>
<!-- Bootstrap Toast Notification -->
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="toastMessage" class="toast align-items-center text-white bg-success border-0" role="alert"
        aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <span data-lang="product_added_successfully!">Product added successfully!</span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                aria-label="Close"></button>
        </div>
    </div>
</div>

<div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static"
    data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-4 d-flex align-items-center justify-content-center">
            <div class="spinner-border text-primary" role="status"></div>
            <p id="loadingMessage" class="mt-3"><span data-lang="Loading...">Đang xử lý...</span></p>
        </div>
    </div>
</div>

<script id="product_id" type="application/json">
        {{{json product_id}}}
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('backBtn').addEventListener('click', function (e) {
            e.preventDefault();

            window.history.go(-1);
            console.log("Check");
        });

        const product_id = JSON.parse(document.getElementById("product_id").textContent);

        document.querySelectorAll('#productTypesTableBody .form-check-input').forEach(checkbox => {
            checkbox.addEventListener('change', function (e) {
                const productTypeId = e.target.value;
                const priceInput = document.getElementById(`priceInput_${productTypeId}`);

                if (e.target.checked) {
                    priceInput.classList.remove('d-none'); // Hiển thị trường nhập giá
                    const inputField = priceInput.querySelector('input');
                    inputField.required = true;  // Đánh dấu là trường bắt buộc khi hiển thị
                } else {
                    priceInput.classList.add('d-none'); // Ẩn trường nhập giá
                    const inputField = priceInput.querySelector('input');
                    inputField.required = false;  // Hủy yêu cầu khi ẩn
                }
            });
        });





        let uploadedFiles = [];
        const addProductModal = document.getElementById('addProductModal');
        const deleteConfirmationModal = document.getElementById('deleteConfirmationModal');
        const loadingModal = new bootstrap.Modal(document.getElementById("loadingModal"));
        const productImagesInput = document.getElementById('productImages');
        const addImagePreview = document.getElementById('addImagePreview');

        const editImageBtn = document.querySelector('#addImageBtn');
        const editProductImagesInput = document.getElementById('editProductImages');
        const editImagePreview = document.getElementById('editImagePreview');

        editImageBtn.addEventListener('click', function () {
            editProductImagesInput.click();
        });

        handleImageUpload(editProductImagesInput, editImagePreview, editImageBtn);

        function handleImageUpload(inputElement, previewContainer, addButton) {
            uploadedFiles.length = 0;
            inputElement.addEventListener('change', function (event) {
                const files = event.target.files;

                for (let file of files) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        uploadedFiles.push(file);
                        const imgContainer = document.createElement('div');
                        imgContainer.classList.add('image-container', 'position-relative');
                        imgContainer.setAttribute('file-index', uploadedFiles.length - 1);

                        const img = document.createElement('img');
                        img.classList.add('preview-img');
                        img.src = e.target.result;



                        const removeBtn = createButton('&minus;', 'remove-image', function () {
                            imgContainer.remove();
                            updateAll(previewContainer);
                        });

                        const prevBtn = createButton('&larr;', 'prev-image', function (event) {
                            event.preventDefault();
                            moveImage(previewContainer, imgContainer, -1);
                        });

                        const nextBtn = createButton('&rarr;', 'next-image', function (event) {
                            event.preventDefault();
                            moveImage(previewContainer, imgContainer, 1);
                        });

                        const indexLabel = document.createElement('span');
                        indexLabel.classList.add('index-label', 'position-absolute', 'bottom-0', 'start-0', 'm-1', 'badge', 'bg-secondary');
                        indexLabel.innerText = '1';

                        const buttonContainer = document.createElement('div');
                        buttonContainer.classList.add('button-overlay');
                        buttonContainer.appendChild(prevBtn);
                        buttonContainer.appendChild(removeBtn);
                        buttonContainer.appendChild(nextBtn);

                        imgContainer.appendChild(img);
                        imgContainer.appendChild(buttonContainer);
                        imgContainer.appendChild(indexLabel);
                        previewContainer.insertBefore(imgContainer, addButton.parentElement);

                        updateAll(previewContainer);
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        function createButton(innerHTML, className, onClick) {
            const button = document.createElement('button');
            button.classList.add(className);
            button.innerHTML = innerHTML;
            button.addEventListener('click', onClick);
            return button;
        }
        function updateAll(imagePreview) {
            updatePrimaryImage();
            updateNavigationButtons(imagePreview);
            updateIndexes(imagePreview);
        }
        function moveImage(imagePreview, imgContainer, direction) {
            const parent = imgContainer.parentElement;
            const images = Array.from(parent.children).filter(el => el.classList.contains('image-container'));
            const index = images.indexOf(imgContainer);
            const newIndex = index + direction;

            if (newIndex >= 0 && newIndex < images.length) {
                parent.insertBefore(imgContainer, direction === 1 ? images[newIndex].nextSibling : images[newIndex]);
                //[uploadedFiles[index], uploadedFiles[index + direction]] = [uploadedFiles[index + direction], uploadedFiles[index]];
                updateAll(imagePreview);
            }
        }

        function updatePrimaryImage() {
            document.querySelectorAll('.image-container .primary-badge').forEach(badge => badge.remove());
            document.querySelectorAll('.preview-img').forEach(img => img.classList.remove('border', 'border-danger', 'border-2'));

            const imageContainers = document.querySelectorAll('.image-container');

            if (imageContainers.length > 0) {
                const firstImage = imageContainers[0];

                const primaryBadge = document.createElement('span');
                primaryBadge.classList.add('badge', 'bg-danger', 'position-absolute', 'top-0', 'start-0', 'm-1', 'primary-badge');
                primaryBadge.innerText = 'Ảnh chính';

                firstImage.appendChild(primaryBadge);
                firstImage.querySelector('.preview-img').classList.add('border', 'border-danger', 'border-2');
            }
        }
        function updateIndexes(imagePreview) {
            imagePreview.querySelectorAll('.image-container').forEach((container, index) => {
                const indexLabel = container.querySelector('.index-label');
                if (indexLabel) {
                    indexLabel.innerText = index + 1;
                }
            });
        }
        function updateNavigationButtons(imagePreview) {
            const imageContainers = imagePreview.querySelectorAll('.image-container');

            imageContainers.forEach((container, index) => {
                const prevBtn = container.querySelector('.prev-image');
                const nextBtn = container.querySelector('.next-image');

                prevBtn.style.display = index === 0 ? 'none' : 'inline-block';
                nextBtn.style.display = index === imageContainers.length - 1 ? 'none' : 'inline-block';
            });
        }

        const deletedImageIds = [];
        editProduct();
        function editProduct() {
            deletedImageIds.length = 0;

            //const productCard = button.closest('.product-card');
            //const productId = productCard.getAttribute("data-id");
            const productId = product_id;
            showLoadingModal();
            fetch(`/products/id/${productId}`)
                .then(response => response.json())
                .then(product => {
                    document.getElementById("editProductId").value = product._id;
                    document.getElementById("editProductName").value = product.name;
                    document.getElementById("editProductCategory").value = product.category_id._id;
                    document.getElementById("editProductBrand").value = product.brand_id._id;
                    document.getElementById("editProductShortDescription").value = product.short_description;
                    document.getElementById("editProductSpecification").value = product.specification;
                    document.getElementById("editProductOriginCountry").value = product.origin_country;
                    document.getElementById("editProductManufacturer").value = product.manufacturer;

                    //const statusSelect = document.getElementById("editProductStatus");
                    //const statusText = document.getElementById("readonlyProductStatus");

                    //if (product.status === "discontinued") {
                        //statusSelect.style.display = "none";
                        //statusText.textContent = "Ngừng bán vĩnh viễn";
                        //statusText.style.display = "block";
                    //} else {
                        //statusSelect.style.display = "block";
                        //statusText.style.display = "none";
                        //statusSelect.value = product.status;

                        //if (product.status !== "not_started") {
                            //const notStartedOption = statusSelect.querySelector('option[value="not_started"]');
                            //if (notStartedOption) {
                                //notStartedOption.style.display = "none";
                            //}
                        //}
                    //}

                    const productTypesTableBody = document.getElementById('productTypesTableBody');

                    document.querySelectorAll('#productTypesTableBody .form-check-input').forEach(checkbox => {
                        const productTypeId = checkbox.value;
                        const priceInputDiv = document.getElementById(`priceInput_${productTypeId}`);
                        const priceInput = priceInputDiv ? priceInputDiv.querySelector('input') : null;

                        const selectedProductType = product.product_product_types.find(type => type.product_type_id._id === productTypeId);

                        if (selectedProductType) {
                            checkbox.checked = true;

                            priceInputDiv.classList.remove('d-none');
                            priceInput.value = selectedProductType.price;
                            priceInput.required = true;
                        } else {
                            priceInputDiv.classList.add('d-none');
                            checkbox.checked = false;
                        }

                        if (selectedProductType && selectedProductType.isDelete === false) {
                            checkbox.disabled = true; // Khóa checkbox nếu isDelete là false
                            checkbox.classList.add('disabled'); // Thêm lớp 'disabled' để giao diện khóa checkbox
                        }
                    });

                    document.querySelectorAll('#productTypesTableBody .form-check-input').forEach(checkbox => {
                        checkbox.addEventListener('change', function (e) {
                            const productTypeId = e.target.value;
                            const priceInput = document.getElementById(`priceInput_${productTypeId}`);

                            if (e.target.checked) {
                                priceInput.classList.remove('d-none');
                                const inputField = priceInput.querySelector('input');
                                inputField.required = true;
                            } else {
                                priceInput.classList.add('d-none');
                                const inputField = priceInput.querySelector('input');
                                inputField.required = false;
                            }
                        });
                    });


                    const sectionContainer = document.getElementById("editSectionContainer");
                    sectionContainer.innerHTML = "";

                    if (product.sections && product.sections.length > 0) {
                        product.sections.forEach(section => {
                            const sectionItem = document.createElement("div");
                            sectionItem.classList.add("border", "p-3", "mb-3", "rounded", "section-item");

                            const sectionContent = document.createElement("div");
                            sectionContent.classList.add("d-flex", "align-items-center", "mb-2");

                            const label = document.createElement("span");
                            label.textContent = "Section:";
                            label.classList.add("me-2");

                            const select = document.createElement("select");
                            select.classList.add("form-select", "me-2", "d-inline-block", "section-select");

                            select.innerHTML = `
                        <option value="" disabled>Select Section</option>
                        {{#each sections}}
                        <option value="{{this._id}}">{{this.name}}</option>
                        {{/each}}
                    `;

                            select.value = section.section_id;

                            const removeSectionBtn = document.createElement("button");
                            removeSectionBtn.classList.add("btn", "btn-danger", "btn-sm", "ms-2");
                            removeSectionBtn.innerHTML = '<i class="bi bi-trash"></i>';
                            removeSectionBtn.addEventListener("click", function (event) {
                                event.preventDefault();
                                sectionItem.remove();
                            });

                            const itemsContainer = document.createElement("div");
                            itemsContainer.classList.add("mt-3");

                            if (section.details && section.details.length > 0) {
                                section.details.forEach(detail => {
                                    addItemSection(itemsContainer, detail.title, detail.content);
                                });
                            }

                            const addItemBtn = document.createElement("button");
                            addItemBtn.classList.add("btn", "btn-outline-primary", "btn-sm", "mt-2");
                            addItemBtn.innerHTML = '<i class="bi bi-plus-circle"></i> Thêm mục';
                            addItemBtn.addEventListener("click", function (event) {
                                event.preventDefault();
                                addItem(itemsContainer);
                            });

                            sectionContent.appendChild(label);
                            sectionContent.appendChild(select);
                            sectionContent.appendChild(removeSectionBtn);

                            sectionItem.appendChild(sectionContent);
                            sectionItem.appendChild(itemsContainer);
                            sectionItem.appendChild(addItemBtn);
                            sectionContainer.appendChild(sectionItem);
                        })
                    }

                    const images = editImagePreview.querySelectorAll(".image-container");
                    for (let i = 0; i < images.length; i++) {
                        images[i].remove();
                    }


                    product.images.forEach((image, index) => {
                        const imgContainer = document.createElement('div');
                        imgContainer.classList.add('image-container', 'position-relative');
                        imgContainer.setAttribute("data-image-id", image._id);

                        const img = document.createElement('img');
                        img.classList.add('preview-img');
                        img.src = image.image_url;

                        const removeBtn = createButton('&minus;', 'remove-image', function () {
                            imgContainer.remove();
                            deletedImageIds.push(image._id);
                            updateAll(editImagePreview);
                        });

                        const prevBtn = createButton('&larr;', 'prev-image', function (event) {
                            event.preventDefault();
                            moveImage(editImagePreview, imgContainer, -1);
                        });

                        const nextBtn = createButton('&rarr;', 'next-image', function (event) {
                            event.preventDefault();
                            moveImage(editImagePreview, imgContainer, 1);
                        });

                        const indexLabel = document.createElement('span');
                        indexLabel.classList.add('index-label', 'position-absolute', 'bottom-0', 'start-0', 'm-1', 'badge', 'bg-secondary');
                        indexLabel.innerText = (index + 1).toString();

                        const buttonContainer = document.createElement('div');
                        buttonContainer.classList.add('button-overlay');
                        buttonContainer.appendChild(prevBtn);
                        buttonContainer.appendChild(removeBtn);
                        buttonContainer.appendChild(nextBtn);

                        imgContainer.appendChild(img);
                        imgContainer.appendChild(buttonContainer);
                        imgContainer.appendChild(indexLabel);
                        editImagePreview.insertBefore(imgContainer, editImageBtn.parentElement);
                    });
                    updateAll(editImagePreview);
                    hideLoadingModal();
                });

            //new bootstrap.Modal(editProductModal).show();
        }




        const editSectionContainer = document.getElementById("editSectionContainer")



        document.getElementById("editSectionBtn").addEventListener("click", function (event) {
            event.preventDefault();
            addSection(editSectionContainer);
        });

        function updateSectionOptions() {
            const selectedSections = Array.from(document.querySelectorAll(".section-select"))
                .map(select => select.value)
                .filter(value => value !== "");

            document.querySelectorAll(".section-select").forEach(select => {
                const currentValue = select.value;
                select.innerHTML = `
            <option value="" disabled>Select Section</option>
            {{#each sections}}
            <option value="{{this._id}}" ${selectedSections.includes("{{this._id}}") && currentValue !== "{{this._id}}" ? 'hidden' : ''}>
                {{this.name}}
            </option>
            {{/each}}
        `;
                select.value = currentValue;
            });
        }
        function addSection(sectionContainer) {
            const sectionItem = document.createElement("div");
            sectionItem.classList.add("border", "p-3", "mb-3", "rounded", "section-item");

            const sectionContent = document.createElement("div");
            sectionContent.classList.add("d-flex", "align-items-center", "mb-2");

            const label = document.createElement("span");
            label.textContent = "Section:";
            label.classList.add("me-2");

            const select = document.createElement("select");
            select.classList.add("form-select", "me-2", "section-select");
            select.innerHTML = `
        <option value="" disabled selected>Select Section</option>
        {{#each sections}}
        <option value="{{this._id}}">{{this.name}}</option>
        {{/each}}
    `;

            select.addEventListener("change", updateSectionOptions);

            const removeSectionBtn = document.createElement("button");
            removeSectionBtn.classList.add("btn", "btn-danger", "btn-sm", "ms-2");
            removeSectionBtn.innerHTML = '<i class="bi bi-trash"></i>';
            removeSectionBtn.addEventListener("click", function (event) {
                event.preventDefault();
                sectionItem.remove();
                updateSectionOptions();
            });

            const itemsContainer = document.createElement("div");
            itemsContainer.classList.add("mt-3");

            const addItemBtn = document.createElement("button");
            addItemBtn.classList.add("btn", "btn-outline-primary", "btn-sm", "mt-2");
            addItemBtn.innerHTML = '<i class="bi bi-plus-circle"></i> Thêm mục';
            addItemBtn.addEventListener("click", function (event) {
                event.preventDefault();
                addItem(itemsContainer);
            });

            sectionContent.appendChild(label);
            sectionContent.appendChild(select);
            sectionContent.appendChild(removeSectionBtn);

            sectionItem.appendChild(sectionContent);
            sectionItem.appendChild(itemsContainer);
            sectionItem.appendChild(addItemBtn);
            sectionContainer.appendChild(sectionItem);

            updateSectionOptions();
        }

        function addItemSection(container, title = "", content = "") {
            const itemDiv = document.createElement("div");
            itemDiv.classList.add("d-flex", "align-items-start", "mb-2", "border", "p-2", "rounded", "section-detail-item");

            const contentCol = document.createElement("div");
            contentCol.classList.add("flex-grow-1", "me-2");

            const titleInput = document.createElement("input");
            titleInput.type = "text";
            titleInput.classList.add("form-control", "mb-2", "item-title");
            titleInput.placeholder = "Nhập tiêu đề";
            titleInput.value = title;

            const contentTextarea = document.createElement("textarea");
            contentTextarea.classList.add("form-control", "item-content");
            contentTextarea.rows = 2;
            contentTextarea.placeholder = "Nhập nội dung";
            contentTextarea.value = content;

            const buttonCol = document.createElement("div");
            buttonCol.classList.add("d-flex", "align-items-center");

            const removeItemBtn = document.createElement("button");
            removeItemBtn.classList.add("btn", "btn-danger", "btn-sm");
            removeItemBtn.innerHTML = '<i class="bi bi-trash"></i>';
            removeItemBtn.addEventListener("click", function (event) {
                event.preventDefault();
                itemDiv.remove();
            });

            contentCol.appendChild(titleInput);
            contentCol.appendChild(contentTextarea);

            buttonCol.appendChild(removeItemBtn);

            itemDiv.appendChild(contentCol);
            itemDiv.appendChild(buttonCol);
            container.appendChild(itemDiv);
        }
        function addItem(container) {
            const itemDiv = document.createElement("div");
            itemDiv.classList.add("d-flex", "align-items-start", "mb-2", "border", "p-2", "rounded", "section-detail-item");

            const contentCol = document.createElement("div");
            contentCol.classList.add("flex-grow-1", "me-2");

            const titleInput = document.createElement("input");
            titleInput.type = "text";
            titleInput.classList.add("form-control", "mb-2", "item-title");
            titleInput.placeholder = "Enter Title";

            const contentTextarea = document.createElement("textarea");
            contentTextarea.classList.add("form-control", "item-content");
            contentTextarea.rows = 2;
            contentTextarea.placeholder = "Enter Content";

            const buttonCol = document.createElement("div");
            buttonCol.classList.add("d-flex", "align-items-center");

            const removeItemBtn = document.createElement("button");
            removeItemBtn.classList.add("btn", "btn-danger", "btn-sm");
            removeItemBtn.innerHTML = '<i class="bi bi-trash"></i>';
            removeItemBtn.addEventListener("click", function (event) {
                event.preventDefault();
                itemDiv.remove();
            });

            contentCol.appendChild(titleInput);
            contentCol.appendChild(contentTextarea);
            buttonCol.appendChild(removeItemBtn);

            itemDiv.appendChild(contentCol);
            itemDiv.appendChild(buttonCol);
            container.appendChild(itemDiv);
        }

        const editProductForm = document.getElementById('editProductForm');


        editProductForm.addEventListener('submit', async function (event) {
            event.preventDefault();
            const productId = document.getElementById('editProductId').value;

            const formData = new FormData();
            formData.append('name', document.getElementById('editProductName').value);
            formData.append('category_id', document.getElementById('editProductCategory').value);
            formData.append('brand_id', document.getElementById('editProductBrand').value);
            formData.append('short_description', document.getElementById('editProductShortDescription').value);
            formData.append('specification', document.getElementById('editProductSpecification').value);
            formData.append('origin_country', document.getElementById('editProductOriginCountry').value);
            formData.append('manufacturer', document.getElementById('editProductManufacturer').value);
            //formData.append('status', document.getElementById('editProductStatus').value);


            const imageContainers = editImagePreview.querySelectorAll('.image-container');
            const imageData = [];
            const newImages = [];

            imageContainers.forEach((imgContainer, index) => {
                const imageId = imgContainer.getAttribute('data-image-id');
                const imageFileIndex = imgContainer.getAttribute('file-index');
                const isPrimary = index === 0;

                if (imageId) {
                    imageData.push({ id: imageId, is_primary: isPrimary, sort_order: index });
                } else {
                    newImages.push({ file: uploadedFiles[imageFileIndex], sort_order: index });
                }
            });

            if (imageData.length === 0 && newImages.length === 0) {
                showToast('Vui lòng chọn ít nhất một hình ảnh!', 'danger');
                return;
            }


            formData.append('updateImages', JSON.stringify(imageData));

            const sortOrders = [];
            newImages.forEach((image) => {
                formData.append('images', image.file);
                sortOrders.push(image.sort_order);
            });

            formData.append('new_images_sort_order', JSON.stringify(sortOrders));

            formData.append('deleted_images', JSON.stringify(deletedImageIds));

            const sections = [];

            editProductForm.querySelectorAll('.section-item').forEach((section, index) => {
                const sectionId = section.querySelector('.section-select').value;
                const details = [];

                section.querySelectorAll('.section-detail-item').forEach((item) => {
                    const title = item.querySelector('.item-title').value;
                    const content = item.querySelector('.item-content').value;
                    details.push({ title, content });
                });


                sections.push({ section_id: sectionId, details });
            });

            formData.append("sections", JSON.stringify(sections));

            const productTypePrices = [];
            document.querySelectorAll('#productTypesTableBody tr').forEach(row => {
                const checkbox = row.querySelector('input[type="checkbox"]');
                const priceInput = row.querySelector('input[type="number"]');

                if (checkbox && checkbox.checked && priceInput) {
                    const typeId = checkbox.value;
                    const price = priceInput.value.trim();

                    if (price) {
                        productTypePrices.push({
                            product_type_id: typeId,
                            price: Number(price)
                        });
                    }
                }
            });

            formData.append('product_product_types', JSON.stringify(productTypePrices));

            try {
                showLoadingModal("edit");
                const response = await fetch(`/products/edit/${productId}`, {
                    method: 'PUT',
                    body: formData
                });

                const result = await response.json();

                if (result.status === 200) {
                    showToast(result.message, "success");

                    editProductForm.reset();
                    window.location.href = "/products"
                    hideLoadingModal();
                } else {
                    showToast(result.message, 'danger');
                    hideLoadingModal();
                }
            } catch (error) {
                console.log(error);
                hideLoadingModal();
                showToast('An error occurred!', 'danger');
            }
        });

        function showToast(message, type) {
            const toastEl = document.getElementById("toastMessage");
            toastEl.classList.remove("bg-success", "bg-danger");
            toastEl.classList.add(`bg-${type}`);
            toastEl.querySelector(".toast-body").innerText = message;

            const toast = new bootstrap.Toast(toastEl);
            toast.show();
        }

        function deleteProduct(button) {
            const productCard = button.closest('.product-card');
            const productId = productCard.getAttribute("data-id");

            if (!productId) {
                showToast("Product ID is required!", "danger");
                return;
            }

            const modal = new bootstrap.Modal(deleteConfirmationModal);
            modal.show();

            document.getElementById("confirmDeleteBtn").onclick = function () {
                modal.hide();

                showLoadingModal("delete");

                fetch(`/products/delete/${productId}`, {
                    method: "DELETE"
                })
                    .then(response => response.json())
                    .then(result => {
                        if (result.status === 200) {
                            showToast(result.message, "success");
                            productCard.remove();
                        } else {
                            showToast(result.message, "danger");
                        }
                    })
                    .catch(error => {
                        showToast("An error occurred!", "danger");
                        hideLoadingModal();
                        modal.hide();
                    })
                    .finally(() => {
                        hideLoadingModal();
                    });
            };
        }
        function showLoadingModal(action) {
            let message = "Đang xử lý...";
            if (action === "add") message = "Đang thêm sản phẩm...";
            if (action === "edit") message = "Đang cập nhật sản phẩm...";
            if (action === "delete") message = "Đang xóa sản phẩm...";

            document.getElementById("loadingMessage").innerText = message;
            const modal = new bootstrap.Modal(document.getElementById("loadingModal"));
            modal.show();
        }

        function hideLoadingModal() {
            const modal = bootstrap.Modal.getInstance(document.getElementById("loadingModal"));
            if (modal) modal.hide();
        }

        document.querySelectorAll('.edit-product').forEach(button => {
            button.addEventListener('click', function () {
                editProduct(button);
            });
        });
        document.querySelectorAll('.delete-product').forEach(button => {
            button.addEventListener('click', function () {
                deleteProduct(button);
            });
        });

    });
</script>