<style>
    .product-name {
        overflow: hidden;
        text-wrap: wrap;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        font-weight: bold;
        display: block;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .align-items-center {
        align-items: center !important;
        padding: 12px;
    }

    .product-name-container {
        max-width: 180px;
        /* Gi·ªõi h·∫°n chi·ªÅu r·ªông */
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        display: block;
    }

    .product-type {
        display: block;
        font-size: 0.9em;
        color: gray;
    }
</style>


<div class="container mt-3">
    <!-- Button quay l·∫°i -->
    <a href="" class="btn btn-secondary mb-4" id="backBtn">
        <i class="bi bi-arrow-left-circle"></i> Quay l·∫°i
    </a>

    <h3>Th√™m L√¥ H√†ng M·ªõi</h3>

    <div class="product-card p-2" data-id="{{this._id}}">
        <div class="row align-items-center">
            <div class="col-md-1">
                <img src="{{product_image}}" class="img-fluid rounded"
                    style="width: 100px; aspect-ratio: 1/1; object-fit: cover;" alt="{{product_name}}">
            </div>

            <div class="col-md-11">
                <h6 class="product-name"><strong>T√™n: </strong>{{product_name}}</h6>
                {{!-- <p><strong>Gi√°: </strong>{{formatPrice product_price}} VND</p> --}}
                <p class="mb-1 small">
                    <strong><span data-lang="status">Status</span>:</strong>
                    <span class="badge {{getProductStatusClass product_status}}">{{formatProductStatus
                        product_status}}</span>
                </p>
            </div>
        </div>
    </div>


    {{#if (neq product_status "discontinued")}}
    <!-- Form nh·∫≠p h√†ng -->
    <form id="importStockForm">
        <input type="hidden" id="produc_id" name="product_id" value="{{product_id}}">
        <input type="hidden" id="stock_entry_id" name="stock_entry_id">

        <div class="mb-3">
            <label for="batch_number" class="form-label">M√£ L√¥ H√†ng</label>
            <input type="text" id="batch_number" name="batch_number" class="form-control" required>
        </div>

        <div class="mb-3">
            <label for="product_product_type_id" class="form-label">Lo·∫°i S·∫£n Ph·∫©m</label>
            <select id="product_product_type_id" name="product_product_type_id" class="form-select" required>
                <option value="" disabled selected>Ch·ªçn lo·∫°i s·∫£n ph·∫©m</option>
                {{#each product_product_types}}
                <option value="{{this._id}}">{{this.product_type_id.name}}</option>
                {{/each}}
            </select>
        </div>

        <div class="mb-3">
            <label for="quantity" class="form-label">S·ªë L∆∞·ª£ng Nh·∫≠p</label>
            <input type="number" id="quantity" name="quantity" class="form-control" required>
        </div>

        <div class="mb-3">
            <label for="import_price" class="form-label">Gi√° Nh·∫≠p</label>
            <input type="number" id="import_price" name="import_price" class="form-control" required>
        </div>

        <div class="mb-3">
            <label for="expiry_date" class="form-label">Ng√†y H·∫øt H·∫°n</label>
            <input type="date" id="expiry_date" name="expiry_date" class="form-control" required>
        </div>

        <button type="submit" class="btn btn-success">L∆∞u</button>
    </form>

    {{else}}
    <div class="alert alert-warning">
        S·∫£n ph·∫©m n√†y ƒë√£ ng·ª´ng b√°n vƒ©nh vi·ªÖn.
    </div>
    {{/if}}



    <!-- Hi·ªÉn th·ªã danh s√°ch l√¥ h√†ng c·ªßa s·∫£n ph·∫©m -->
    <h4 class="mt-5">Danh S√°ch L√¥ H√†ng ƒê√£ Nh·∫≠p</h4>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th scope="col">S·∫£n Ph·∫©m</th>
                <th scope="col">M√£ L√¥ H√†ng</th>
                <th scope="col">S·ªë L∆∞·ª£ng Nh·∫≠p</th>
                <th scope="col">S·ªë L∆∞·ª£ng C√≤n L·∫°i</th>
                <th scope="col">Gi√° Nh·∫≠p</th>
                <th scope="col">Ng√†y H·∫øt H·∫°n</th>
                <th scope="col">Ng√†y Nh·∫≠p</th>
                <th scope="col">Tr·∫°ng Th√°i</th>
                <th scope="col">H√†nh ƒê·ªông</th>
            </tr>
        </thead>
        <tbody>
            {{#each stockEntries}}
            <tr>
                <td>
                    <div class="product-name-container">
                        <span class="product-name" title="{{this.product_product_type_id.product_id.name}}">
                            {{this.product_product_type_id.product_id.name}}
                        </span>
                        <small class="product-type">({{this.product_product_type_id.product_type_id.name}})</small>
                    </div>
                </td>

                <td>{{this.batch_number}}</td>
                <td>{{this.quantity}}</td>
                <td>{{this.remaining_quantity}}</td>
                <td>{{formatPrice this.import_price}} VND</td>
                <td>{{this.expiry_date}}</td>
                <td>{{this.import_date}}</td>
                <td>
                    <select class="form-select status-select" data-id="{{this._id}}" {{#if (or (eq
                        this.status "sold_out" ) (eq this.status "expired" ))}}disabled{{/if}}>
                        {{#if (eq this.status "not_started")}}
                        <option value="not_started" selected>üîµ Ch∆∞a B√°n</option>
                        <option value="active">üü¢ S·∫µn S√†ng</option>
                        <option value="paused">üü° T·∫°m Ng·ª´ng</option>
                        <option value="discontinued">üî¥ Ng·ª´ng B√°n</option>
                        {{/if}}

                        {{#if (eq this.status "active")}}
                        <option value="active" selected>üü¢ S·∫µn S√†ng</option>
                        <option value="paused">üü° T·∫°m Ng·ª´ng</option>
                        <option value="discontinued">üî¥ Ng·ª´ng B√°n</option>
                        {{/if}}

                        {{#if (eq this.status "paused")}}
                        <option value="paused" selected>üü° T·∫°m Ng·ª´ng</option>
                        <option value="active">üü¢ S·∫µn S√†ng</option>
                        <option value="discontinued">üî¥ Ng·ª´ng B√°n</option>
                        {{/if}}

                        {{#if (eq this.status "sold_out")}}
                        <option value="sold_out" selected>‚ö´ ƒê√£ B√°n H·∫øt</option>
                        {{/if}}

                        {{#if (eq this.status "expired")}}
                        <option value="expired" selected>‚ö†Ô∏è H·∫øt H·∫°n</option>
                        {{/if}}

                        {{#if (eq this.status "discontinued")}}
                        <option value="discontinued" selected>üî¥ Ng·ª´ng B√°n</option>
                        {{/if}}
                    </select>
                </td>


                <td>
                    {{#if (eq this.status "not_started")}}
                    <button class="btn btn-primary btn-sm edit-btn" data-batch-number="{{this.batch_number}}"
                        data-product-product-type-id="{{this.product_product_type_id._id}}"
                        data-quantity="{{this.quantity}}" data-import-price="{{this.import_price}}"
                        data-expiry-date="{{this.expiry_date}}" data-id="{{this._id}}">S·ª≠a</button>
                    <button class="btn btn-danger btn-sm delete-btn" data-produc-id="{{../product_id}}"
                        data-id="{{this._id}}">X√≥a</button>
                    {{/if}}
                </td>
            </tr>
            {{/each}}

        </tbody>
    </table>
    {{#if stockEntries.length}}
    {{else}}
    <p>Ch∆∞a c√≥ l√¥ h√†ng n√†o.</p>
    {{/if}}
</div>

<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">X√°c Nh·∫≠n X√≥a</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a l√¥ h√†ng n√†y kh√¥ng?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">H·ªßy</button>
                <button type="button" id="confirmDeleteButton" class="btn btn-danger">X√≥a</button>
            </div>
        </div>
    </div>
</div>


<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="toastMessage" class="toast align-items-center text-white bg-success border-0" role="alert"
        aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <span id="toastText"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                aria-label="Close"></button>
        </div>
    </div>
</div>


<div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static"
    data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-4 d-flex align-items-center justify-content-center">
            <div class="spinner-border text-primary" role="status"></div>
            <p id="loadingMessage" class="mt-3"><span data-lang="Loading...">ƒêang x·ª≠ l√Ω...</span></p>
        </div>
    </div>
</div>
<div class="modal fade" id="confirmStatusChangeModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static"
    data-bs-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">X√°c Nh·∫≠n Thay ƒê·ªïi Tr·∫°ng Th√°i</h5>
                <button type="button" id="closeStatusChangeButton" class="btn-close" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën thay ƒë·ªïi tr·∫°ng th√°i c·ªßa l√¥ h√†ng n√†y?</p>
            </div>
            <div class="modal-footer">
                <button type="button" id="cancelStatusChangeButton" class="btn btn-secondary"
                    data-bs-dismiss="modal">H·ªßy</button>
                <button type="button" id="confirmStatusChangeButton" class="btn btn-success">X√°c Nh·∫≠n</button>
            </div>
        </div>
    </div>
</div>


<script>


    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('backBtn').addEventListener('click', function (e) {
            e.preventDefault();

            window.history.go(-1);
        });

        const toast = new bootstrap.Toast(document.getElementById('toastMessage'));
        window.loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
        const productId = document.getElementById('produc_id')?.value;

        const confirmStatusChangeModal = new bootstrap.Modal(document.getElementById('confirmStatusChangeModal'));
        let selectedStatusElement = null;
        let selectedStatusValue = null;
        let selectedStockEntryId = null;

        document.querySelectorAll('.status-select').forEach(select => {
            select.addEventListener('change', function () {
                selectedStatusElement = this;
                selectedStatusValue = this.value;
                selectedStockEntryId = this.getAttribute('data-id');

                confirmStatusChangeModal.show();
            });

        });
        document.getElementById('cancelStatusChangeButton').addEventListener('click', function () {
            location.reload();
        });
        document.getElementById('closeStatusChangeButton').addEventListener('click', function () {
            location.reload();
        });
        document.getElementById('confirmStatusChangeButton').addEventListener('click', async function () {
            confirmStatusChangeModal.hide();

            try {
                const response = await fetch(`/products/${productId}/import-stock/${selectedStockEntryId}/update-status`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        status: selectedStatusValue
                    })
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Request failed');
                }

                showToast('Tr·∫°ng th√°i l√¥ h√†ng ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!', true);
                setTimeout(() => {
                    location.reload();
                }, 1000);
            } catch (error) {
                console.error('L·ªói:', error);
                showToast('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!', false);
            }
        });





        const batchNumberInput = document.getElementById('batch_number');
        //batchNumberInput.value = generateBatchNumber();
        document.getElementById("importStockForm")?.addEventListener("submit", async function (event) {
            event.preventDefault();
            loadingModal.show();
            document.getElementById('loadingMessage').textContent = 'ƒêang x·ª≠ l√Ω...';

            try {
                const formData = new FormData(this);
                const data = Object.fromEntries(formData.entries());

                if (data.quantity) {
                    data.quantity = parseInt(data.quantity);
                }

                if (data.import_price) {
                    data.import_price = parseFloat(data.import_price);
                }

                const url = data.stock_entry_id
                    ? `/products/${data.product_id}/import-stock/${data.stock_entry_id}/update-info`
                    : `/products/${data.product_id}/import-stock/add`;

                const response = await fetch(url, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Request failed');
                }
                const result = await response.json();

                showToast(data.stock_entry_id ? 'C·∫≠p nh·∫≠t l√¥ h√†ng th√†nh c√¥ng!' : 'Th√™m l√¥ h√†ng th√†nh c√¥ng!', true);
                setTimeout(() => {
                    location.reload();
                }, 1500);

            } catch (error) {
                console.error("L·ªói:", error);
                showToast('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!', false);
            } finally {
                window.loadingModal.hide();

            }
        });
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', function () {
                const batchNumber = this.getAttribute('data-batch-number');
                const quantity = this.getAttribute('data-quantity');
                const importPrice = this.getAttribute('data-import-price');
                const expiryDate = this.getAttribute('data-expiry-date');
                const stockEntryId = this.getAttribute('data-id');
                //const stockStatus = this.getAttribute('data-status');
                const productProductTypeId = this.getAttribute('data-product-product-type-id');

                document.getElementById('batch_number').value = batchNumber;
                document.getElementById('quantity').value = quantity;
                document.getElementById('import_price').value = importPrice;
                document.getElementById('expiry_date').value = formatToDateInput(expiryDate);
                document.getElementById('stock_entry_id').value = stockEntryId;
                //document.getElementById('stock_status').value = stockStatus;
                const productTypeSelect = document.getElementById('product_product_type_id');
                productTypeSelect.value = productProductTypeId;
            });
        });


        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', async function () {
                const stockEntryId = this.getAttribute('data-id');
                const productId = this.getAttribute('data-product-id');

                try {
                    const response = await fetch(`/products/${productId}/import-stock/${stockEntryId}/delete`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const result = await response.json();

                    if (response.ok) {
                        showToast(result.message, true);
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showToast(`L·ªói: ${result.message}`, false);
                    }
                } catch (error) {
                    console.error("L·ªói khi x√≥a l√¥ h√†ng:", error);
                    showToast("ƒê√£ x·∫£y ra l·ªói khi x√≥a l√¥ h√†ng.", false);
                }
            });
        });


        loadingModal._element.addEventListener('shown.bs.modal', () => {
            console.log('Modal ƒë√£ hi·ªÉn th·ªã');
        });

        loadingModal._element.addEventListener('hidden.bs.modal', () => {
            console.log('Modal ƒë√£ ·∫©n');
        });
        function formatToDateInput(dateString) {
            const date = new Date(dateString);
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        function formatDate(dateString) {
            if (!dateString) return '';
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN');
        }

        function showToast(message, isSuccess = true) {
            const toastElement = document.getElementById('toastMessage');
            const toastText = document.getElementById('toastText');

            toastText.textContent = message;
            toastElement.classList.remove('bg-success', 'bg-danger');
            toastElement.classList.add(isSuccess ? 'bg-success' : 'bg-danger');
            toast.show();
        }
        function generateBatchNumber() {
            const prefix = 'LOT';
            const randomNum = Math.floor(1000 + Math.random() * 9000);
            const currentDate = new Date();
            const year = currentDate.getFullYear();
            const month = String(currentDate.getMonth() + 1).padStart(2, '0');
            const day = String(currentDate.getDate()).padStart(2, '0');

            return `${prefix}-${year}${month}${day}-${randomNum}`;
        }

        const batchNumbers = [];
        for (let i = 0; i < 200; i++) {
            batchNumbers.push(generateBatchNumber());
        }

        console.log(batchNumbers);

        document.querySelectorAll('td:nth-child(6), td:nth-child(7)').forEach(td => {
            if (td.textContent) {
                td.textContent = formatDate(td.textContent);
            }
        });
    });

</script>