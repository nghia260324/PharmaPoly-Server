<style>
    .product-name {
        overflow: hidden;
        text-wrap: wrap;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .align-items-center {
        align-items: center !important;
        padding: 12px;
    }
</style>
<div class="container mt-5">
    <!-- Button quay lại -->
    <a href="/products" class="btn btn-secondary mb-4">
        <i class="bi bi-arrow-left-circle"></i> Quay lại
    </a>

    <h3>Thêm Lô Hàng Mới</h3>

    <div class="product-card p-2" data-id="{{this._id}}">
        <div class="row align-items-center">
            <div class="col-md-1">
                <img src="{{product_image}}" class="img-fluid rounded"
                    style="width: 100px; aspect-ratio: 1/1; object-fit: cover;" alt="{{product_name}}">
            </div>

            <div class="col-md-11">
                <h6 class="product-name"><strong>Tên: </strong>{{product_name}}</h6>
                <p><strong>Giá: </strong>{{product_price}} VND</p>
            </div>
        </div>
    </div>




    <!-- Form nhập hàng -->
    <form id="importStockForm">
        <input type="hidden" id="produc_id" name="product_id" value="{{product_id}}">
        <input type="hidden" id="stock_entry_id" name="stock_entry_id">

        <div class="mb-3">
            <label for="batch_number" class="form-label">Mã Lô Hàng</label>
            <input type="text" id="batch_number" name="batch_number" class="form-control" required>
        </div>
        <div class="mb-3">
            <label for="quantity" class="form-label">Số Lượng Nhập</label>
            <input type="number" id="quantity" name="quantity" class="form-control" required>
        </div>

        <div class="mb-3">
            <label for="import_price" class="form-label">Giá Nhập</label>
            <input type="number" id="import_price" name="import_price" class="form-control" required>
        </div>

        <div class="mb-3">
            <label for="expiry_date" class="form-label">Ngày Hết Hạn</label>
            <input type="date" id="expiry_date" name="expiry_date" class="form-control" required>
        </div>

        <button type="submit" class="btn btn-success">Lưu</button>
    </form>

    <!-- Hiển thị danh sách lô hàng của sản phẩm -->
    <h4 class="mt-5">Danh Sách Lô Hàng Đã Nhập</h4>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th scope="col">Mã Lô Hàng</th>
                <th scope="col">Số Lượng Nhập</th>
                <th scope="col">Giá Nhập</th>
                <th scope="col">Ngày Hết Hạn</th>
                <th scope="col">Ngày Nhập</th>
                <th scope="col">Trạng Thái</th>
                <th scope="col">Hành Động</th>
            </tr>
        </thead>
        <tbody>
            {{#each stockEntries}}
            <tr>
                <td>{{this.batch_number}}</td>
                <td>{{this.quantity}}</td>
                <td>{{this.import_price}} VND</td>
                <td>{{this.expiry_date}}</td>
                <td>{{this.import_date}}</td>
                <td>
                    <select class="form-select status-select" data-id="{{this._id}}" {{#if (or (eq
                        this.status "sold_out" ) (eq this.status "expired" ))}}disabled{{/if}}>
                        {{#if (eq this.status "not_started")}}
                        <option value="not_started" selected>Chưa Sẵn Sàng Bán</option>
                        <option value="active">Sẵn Sàng Bán</option>
                        <option value="paused">Tạm Ngừng Bán</option>
                        <option value="discontinued">Ngừng Bán</option>
                        {{/if}}

                        {{#if (eq this.status "active")}}
                        <option value="active" selected>Sẵn Sàng Bán</option>
                        <option value="paused">Tạm Ngừng Bán</option>
                        <option value="discontinued">Ngừng Bán</option>
                        {{/if}}

                        {{#if (eq this.status "paused")}}
                        <option value="paused" selected>Tạm Ngừng Bán</option>
                        <option value="active">Sẵn Sàng Bán</option>
                        <option value="discontinued">Ngừng Bán</option>
                        {{/if}}

                        {{#if (eq this.status "sold_out")}}
                        <option value="sold_out" selected>Đã Bán Hết</option>
                        {{/if}}

                        {{#if (eq this.status "expired")}}
                        <option value="expired" selected>Hết Hạn</option>
                        {{/if}}

                        {{#if (eq this.status "discontinued")}}
                        <option value="discontinued" selected>Ngừng Bán</option>
                        {{/if}}
                    </select>
                </td>


                <td>
                    {{#if (eq this.status "not_started")}}
                    <button class="btn btn-primary btn-sm edit-btn" data-batch-number="{{this.batch_number}}"
                        data-quantity="{{this.quantity}}" data-import-price="{{this.import_price}}"
                        data-expiry-date="{{this.expiry_date}}" data-id="{{this._id}}">Sửa</button>
                    <button class="btn btn-danger btn-sm delete-btn" data-id="{{this._id}}">Xóa</button>
                    {{/if}}
                </td>
            </tr>
            {{/each}}

        </tbody>
    </table>
    {{#if stockEntries.length}}
    {{else}}
    <p>Chưa có lô hàng nào.</p>
    {{/if}}
</div>

<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Xác Nhận Xóa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Bạn có chắc chắn muốn xóa lô hàng này không?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" id="confirmDeleteButton" class="btn btn-danger">Xóa</button>
            </div>
        </div>
    </div>
</div>


<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="toastMessage" class="toast align-items-center text-white bg-success border-0" role="alert"
        aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <span id="toastText"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                aria-label="Close"></button>
        </div>
    </div>
</div>


<div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static"
    data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-4 d-flex align-items-center justify-content-center">
            <div class="spinner-border text-primary" role="status"></div>
            <p id="loadingMessage" class="mt-3"><span data-lang="Loading...">Đang xử lý...</span></p>
        </div>
    </div>
</div>
<div class="modal fade" id="confirmStatusChangeModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static"
    data-bs-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Xác Nhận Thay Đổi Trạng Thái</h5>
                <button type="button" id="closeStatusChangeButton" class="btn-close" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Bạn có chắc chắn muốn thay đổi trạng thái của lô hàng này?</p>
            </div>
            <div class="modal-footer">
                <button type="button" id="cancelStatusChangeButton" class="btn btn-secondary"
                    data-bs-dismiss="modal">Hủy</button>
                <button type="button" id="confirmStatusChangeButton" class="btn btn-success">Xác Nhận</button>
            </div>
        </div>
    </div>
</div>


<script>


    document.addEventListener('DOMContentLoaded', function () {
        const toast = new bootstrap.Toast(document.getElementById('toastMessage'));
        const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
        const productId = document.getElementById('produc_id').value;

        const confirmStatusChangeModal = new bootstrap.Modal(document.getElementById('confirmStatusChangeModal'));
        let selectedStatusElement = null;
        let selectedStatusValue = null;
        let selectedStockEntryId = null;

        document.querySelectorAll('.status-select').forEach(select => {
            select.addEventListener('change', function () {
                selectedStatusElement = this;
                selectedStatusValue = this.value;
                selectedStockEntryId = this.getAttribute('data-id');

                confirmStatusChangeModal.show();
            });

        });
        document.getElementById('cancelStatusChangeButton').addEventListener('click', function () {
            location.reload();
        });
        document.getElementById('closeStatusChangeButton').addEventListener('click', function () {
            location.reload();
        });
        document.getElementById('confirmStatusChangeButton').addEventListener('click', async function () {
            confirmStatusChangeModal.hide();

            try {
                const response = await fetch(`/products/${productId}/import-stock/${selectedStockEntryId}/update-status`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        status: selectedStatusValue
                    })
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Request failed');
                }

                showToast('Trạng thái lô hàng đã được thay đổi thành công!', true);
                setTimeout(() => {
                    location.reload();
                }, 1000);
            } catch (error) {
                console.error('Lỗi:', error);
                showToast('Có lỗi xảy ra, vui lòng thử lại!', false);
            }
        });





        const batchNumberInput = document.getElementById('batch_number');
        batchNumberInput.value = generateBatchNumber();
        document.getElementById("importStockForm").addEventListener("submit", async function (event) {
            event.preventDefault();
            loadingModal.show();
            document.getElementById('loadingMessage').textContent = 'Đang xử lý...';

            try {

                const formData = new FormData(this);
                const data = Object.fromEntries(formData.entries());
                if (data.expiry_date) {
                    data.expiry_date = new Date(data.expiry_date).toISOString();
                }

                const url = data.stock_entry_id
                    ? `/products/${data.product_id}/import-stock/${data.stock_entry_id}/update-info`  // Update request
                    : `/products/${data.product_id}/import-stock/add`;

                const response = await fetch(url, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Request failed');
                }
                const result = await response.json();

                showToast(data.stock_entry_id ? 'Cập nhật lô hàng thành công!' : 'Thêm lô hàng thành công!', true);
                setTimeout(() => {
                    location.reload();
                }, 1500);

            } catch (error) {
                console.error("Lỗi:", error);
                showToast('Có lỗi xảy ra, vui lòng thử lại!', false);
            } finally {
                loadingModal.hide();
            }
        });
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', function () {
                const batchNumber = this.getAttribute('data-batch-number');
                const quantity = this.getAttribute('data-quantity');
                const importPrice = this.getAttribute('data-import-price');
                const expiryDate = this.getAttribute('data-expiry-date');
                const stockEntryId = this.getAttribute('data-id');
                const stockStatus = this.getAttribute('data-status');

                document.getElementById('batch_number').value = batchNumber;
                document.getElementById('quantity').value = quantity;
                document.getElementById('import_price').value = importPrice;
                document.getElementById('expiry_date').value = formatToDateInput(expiryDate);
                document.getElementById('stock_entry_id').value = stockEntryId;
                document.getElementById('stock_status').value = stockStatus;
            });
        });
        function formatToDateInput(dateString) {
            const date = new Date(dateString);
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        function formatDate(dateString) {
            if (!dateString) return '';
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN');
        }

        function showToast(message, isSuccess = true) {
            const toastElement = document.getElementById('toastMessage');
            const toastText = document.getElementById('toastText');

            toastText.textContent = message;
            toastElement.classList.remove('bg-success', 'bg-danger');
            toastElement.classList.add(isSuccess ? 'bg-success' : 'bg-danger');
            toast.show();
        }
        function generateBatchNumber() {
            const prefix = 'LOT';
            const randomNum = Math.floor(1000 + Math.random() * 9000);
            const currentDate = new Date();
            const year = currentDate.getFullYear();
            const month = String(currentDate.getMonth() + 1).padStart(2, '0');
            const day = String(currentDate.getDate()).padStart(2, '0');

            return `${prefix}-${year}${month}${day}-${randomNum}`;
        }
        document.querySelectorAll('td:nth-child(4), td:nth-child(5)').forEach(td => {
            if (td.textContent) {
                td.textContent = formatDate(td.textContent);
            }
        });
    });

</script>