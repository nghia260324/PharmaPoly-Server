<div class="p-4">
    <div id="sectionSection" class="section-section">
        <div class="form-container">
            <h5 data-lang="add_new_section">Add New Section</h5>
            <form id="SectionForm" class="row g-3">
                <input type="hidden" id="sectionId">
                <div class="col-md-6">
                    <input type="text" class="form-control" id="sectionName" data-lang-placeholder="section_name" placeholder="Section Name" required>
                </div>
                <div class="col-md-6">
                    <button type="button" class="btn btn-primary">
                        <i class="bi bi-save"></i>
                        <span data-lang="save">Save</span>
                    </button>
                </div>
            </form>
        </div>

        <div id="sectionList">
            {{#each sections}}
            <div class="section-card p-2" data-id="{{this._id}}" data-name="{{this.name}}">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <small class="text-muted section-id">ID: {{this._id}}</small>
                        <h5 class="section-name mb-0"><span data-lang="name">Name</span>: {{this.name}}</h5>
                    </div>
                    <div>
                        <button class="btn btn-sm btn-warning me-2" onclick="editSection(this)">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteSection(this)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
            {{/each}}
        </div>
    </div>
</div>
<!-- Bootstrap Toast Notification -->
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="toastMessage" class="toast align-items-center text-white bg-success border-0" role="alert"
        aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                Section added successfully!
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                aria-label="Close"></button>
        </div>
    </div>
</div>


<!-- Popup Modal Edit Section -->
<div class="modal fade" id="editSectionModal" tabindex="-1" aria-labelledby="editSectionModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        {{!-- modal-dialog-centered --}}
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editSectionModalLabel">Edit Section</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editSectionForm">
                    <input type="hidden" id="editSectionId"> <!-- Hidden field to store the ID -->

                    <!-- ID display field (disabled and greyed out) -->
                    <div class="mb-3">
                        <label for="editSectionIdDisplay" class="form-label">Section ID</label>
                        <input type="text" class="form-control" id="editSectionIdDisplay" disabled>
                    </div>

                    <!-- Section Name input field -->
                    <div class="mb-3">
                        <label for="editSectionName" class="form-label">Section Name</label>
                        <input type="text" class="form-control" id="editSectionName" placeholder="Section Name"
                            required>
                    </div>

                    <!-- Submit button -->
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Popup Modal Confirmation for Delete -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this section?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelector(".btn-primary").addEventListener("click", saveSection);
    });

    async function saveSection() {
        event.preventDefault();

        const nameInput = document.getElementById("sectionName");

        const sectionName = nameInput.value.trim();

        if (!sectionName) {
            showToast("Section name is required!", "danger");
            return;
        }

        try {
            const response = await fetch("/sections/add", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ name: sectionName })
            });

            const result = await response.json();
            if (result.status === 200) {
                showToast(result.message, "success");

                addSectionToDOM(result.data);

                nameInput.value = '';
            } else {
                showToast(result.message, "danger");
            }
        } catch (error) {
            showToast("An error occurred!", "danger");
        }
    }

    function addSectionToDOM(section) {
        const sectionListContainer = document.getElementById("sectionList");
        const sectionCard = document.createElement("div");
        sectionCard.classList.add("section-card");
        sectionCard.classList.add("p-2");
        sectionCard.setAttribute("data-id", section._id);
        sectionCard.setAttribute("data-name", section.name);
        sectionCard.innerHTML = `
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <small class="text-muted section-id">ID: ${section._id}</small>
                <h5 class="section-name mb-0">Name: ${section.name}</h5>
            </div>
            <div>
                <button class="btn btn-sm btn-warning me-2" onclick="editSection(this)">
                    <i class="bi bi-pencil"></i>
                </button>
                <button class="btn btn-sm btn-danger" onclick="deleteSection(this)">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        </div>
    `;
        sectionListContainer.appendChild(sectionCard);
    }

    function deleteSection(button) {


        const sectionCard = button.closest('.section-card');
        const sectionId = sectionCard.getAttribute("data-id");

        if (!sectionId) {
            showToast("Section ID is required!", "danger");
            return;
        }

        const modal = new bootstrap.Modal(document.getElementById('deleteConfirmationModal'));
        modal.show();

        document.getElementById("confirmDeleteBtn").onclick = function () {

            fetch(`/sections/delete/${sectionId}`, {
                method: "DELETE"
            })
                .then(response => response.json())
                .then(result => {
                    if (result.status === 200) {
                        showToast(result.message, "success");
                        sectionCard.remove();
                        modal.hide();
                    } else {
                        showToast(result.message, "danger");
                    }
                })
                .catch(error => {
                    showToast("An error occurred!", "danger");
                    modal.hide();
                });
        };
    }


    function editSection(button) {
        const sectionCard = button.closest('.section-card');
        const sectionId = sectionCard.getAttribute("data-id");
        const sectionName = sectionCard.getAttribute("data-name");

        document.getElementById("editSectionId").value = sectionId;
        document.getElementById("editSectionIdDisplay").value = sectionId;
        document.getElementById("editSectionName").value = sectionName;

        new bootstrap.Modal(document.getElementById('editSectionModal')).show();
    }

    document.getElementById("editSectionForm").addEventListener("submit", async function (event) {
        event.preventDefault();

        const sectionId = document.getElementById("editSectionId").value;
        const sectionName = document.getElementById("editSectionName").value.trim();

        if (!sectionName) {
            showToast("Section name is required!", "danger");
            return;
        }

        try {
            const response = await fetch(`/sections/update/${sectionId}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ name: sectionName })
            });

            const result = await response.json();
            if (result.status === 200) {
                showToast(result.message, "success");
                updateSectionInDOM(result.data);
                const modal = bootstrap.Modal.getInstance(document.getElementById('editSectionModal'));
                modal.hide();
            } else {
                showToast(result.message, "danger");
            }
        } catch (error) {
            showToast("An error occurred!", "danger");
        }
    });

    function updateSectionInDOM(section) {
        const sectionCard = document.querySelector(`[data-id="${section._id}"]`);

        sectionCard.querySelector(".section-name").textContent = `Name: ${section.name}`;
        sectionCard.setAttribute("data-name", section.name);
    }


    function showToast(message, type) {
        const toastEl = document.getElementById("toastMessage");
        toastEl.classList.remove("bg-success", "bg-danger");
        toastEl.classList.add(`bg-${type}`);
        toastEl.querySelector(".toast-body").innerText = message;

        const toast = new bootstrap.Toast(toastEl);
        toast.show();
    }
</script>
