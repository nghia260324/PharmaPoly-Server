<!DOCTYPE html>
<html>

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>{{title}}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />


  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fontsource/source-sans-3@5.0.12/index.css"
    integrity="sha256-tXJfXfp6Ewt1ilPzLDtQnJV4hclT9XuaZUKyUvmyr+Q=" crossorigin="anonymous" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/overlayscrollbars@2.10.1/styles/overlayscrollbars.min.css"
    integrity="sha256-tZHrRjVqNSRyWg2wbppGnT833E/Ys0DHWGwT04GiqQg=" crossorigin="anonymous" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css"
    integrity="sha256-9kPW/n5nn53j4WMRYAxe9c1rCY96Oogo/MKSVdKzPmI=" crossorigin="anonymous" />

  <link rel="stylesheet" href="/stylesheets/style.css">
  <link rel="stylesheet" href="/stylesheets/categoryStyle.css">
  <link rel="stylesheet" href="/stylesheets/sectionStyle.css">
  <link rel="stylesheet" href="/stylesheets/productTypeStyle.css">
  <link rel="stylesheet" href="/stylesheets/brandStyle.css">
  <link rel="stylesheet" href="/stylesheets/productStyle.css">

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.css"
    integrity="sha256-4MX+61mt9NVvvuPjUWdUdyfZfxSB1/Rf9WtqRHgG5S0=" crossorigin="anonymous" />

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/jsvectormap@1.5.3/dist/css/jsvectormap.min.css"
    integrity="sha256-+uGLJmmTKOqBr+2E6KDYs/NRsHxSkONXFHUL0fy2O/4=" crossorigin="anonymous" />

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <link
    href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,500;0,700;0,900;1,100;1,200;1,300;1,500;1,700;1,900&family=Roboto+Condensed:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&family=Roboto:ital,wght@0,300;0,400;0,500;0,700;0,900;1,300;1,400;1,500;1,700;1,900&display=swap"
    rel="stylesheet">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">



</head>

<style>
  .toast-title,
  .toast-message {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    /* Giới hạn 2 dòng */
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
</style>

<body class="layout-fixed sidebar-expand-lg bg-body-tertiary sidebar-open app-loaded">
  <div class="app-wrapper">
    <aside class="app-sidebar bg-body-secondary shadow" data-bs-theme="dark">{{> sidebar}}</aside>
    <main class="app-main">{{{body}}}</main>

  </div>




  <!-- Notification Button -->
  {{!-- <div id="notification-btn"
    style="position: fixed;bottom: 20px;right: 20px;background-color: #0d6efd;color: white;width: 50px;height: 50px;border-radius: 50%;display: flex;justify-content: center;align-items: center;cursor: pointer;z-index: 9999;">
    <i class="bi bi-bell-fill fs-4"></i>
  </div> --}}

  <!-- Notification Button -->
  <!-- Notification Button -->
  <div id="notification-btn" style="position: fixed; bottom: 24px; right: 20px; z-index: 9999; cursor: pointer;">
    <div
      style="background-color: #0d6efd; color: white; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; position: relative;">
      <i class="bi bi-bell-fill fs-4"></i>
      <span id="notification-count"
        style="position: absolute; top: -5px; right: -5px; background-color: red; color: white; font-size: 12px; border-radius: 50%; padding: 2px 6px; display: none;"></span>
    </div>
  </div>



  <!-- Notification Panel -->
  <div id="notification-panel"
    style="position: fixed;top: 0;right: 0;height: 100vh;width: 480px;background-color: #fff;box-shadow: -2px 0 8px rgba(0,0,0,0.2);display: none;z-index: 9998;">
    <div id="notification-panel"
      style="height: 100%;width: 100%;background-color: #fff;box-shadow: -2px 0 8px rgba(0,0,0,0.2);display: flex;flex-direction: column;z-index: 9998;">

      <div
        style="padding: 16px; font-weight: bold; border-bottom: 1px solid #ddd; display: flex; justify-content: space-between; align-items: center;">
        <span>Thông báo</span>
        <button id="close-notification-panel" style="border: none; background: none; font-size: 20px;">&times;</button>
      </div>


      <div id="notification-list" class="list-group"
        style="height: 100%; overflow-y: auto;padding-top: 10px;padding-left: 10px;"></div>
    </div>

  </div>


  <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;" id="toast-container">
    <!-- Toasts sẽ được thêm vào ở đây -->
    <div style="z-index:9999" id="${toastId}" class="toast align-items-center text-white bg-primary border-0">
      <div class="d-flex">
        <div class="toast-body">
          <strong></strong><br>
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
          aria-label="Close"></button>
      </div>
    </div>
  </div>
</body>

</html>

<script src="/socket.io/socket.io.js"></script>
<script src="/javascripts/main.js"></script>
<script>
  window.languageData = {};

  window.loadLanguage = function (lang) {
    fetch("/languages.json")
      .then(response => response.json())
      .then(data => {
        window.languageData = data;
        localStorage.setItem("language", lang);
        document.querySelectorAll("[data-lang]").forEach(el => {
          const key = el.getAttribute("data-lang");
          if (data[lang] && data[lang][key]) {
            el.textContent = data[lang][key];
          }
        });
        document.querySelectorAll("[data-lang-placeholder]").forEach(el => {
          const key = el.getAttribute("data-lang-placeholder");
          if (data[lang] && data[lang][key]) {
            el.setAttribute("placeholder", data[lang][key]);
          }
        });
      })
      .catch(error => console.error("Error: ", error));
  };

  window.loadLanguageForItem = function (item) {
    if (!window.languageData || Object.keys(window.languageData).length === 0) {
      return;
    }

    const lang = localStorage.getItem("language") || "en";

    item.querySelectorAll("[data-lang]").forEach(el => {
      const key = el.getAttribute("data-lang");
      if (window.languageData[lang] && window.languageData[lang][key]) {
        el.textContent = window.languageData[lang][key];
      }
    });

    item.querySelectorAll("[data-lang-placeholder]").forEach(el => {
      const key = el.getAttribute("data-lang-placeholder");
      if (window.languageData[lang] && window.languageData[lang][key]) {
        el.setAttribute("placeholder", window.languageData[lang][key]);
      }
    });
  };

  document.addEventListener("DOMContentLoaded", function () {
    const languageLinks = document.querySelectorAll("#language-menu a");
    const savedLang = localStorage.getItem("language") || "vi";

    languageLinks.forEach(link => {
      link.addEventListener("click", function (event) {
        event.preventDefault();
        const selectedLang = this.getAttribute("href").split("=")[1];
        window.loadLanguage(selectedLang);
      });
    });

    window.loadLanguage(savedLang);
  });
</script>



<script>
  document.addEventListener('DOMContentLoaded', function () {
    const btn = document.getElementById('notification-btn');
    const panel = document.getElementById('notification-panel');
    const list = document.getElementById('notification-list');

    btn.addEventListener('click', () => {
      panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
    });

    const adminId = "67b344c3744eaa2ff0f0ce7d";
    const socketHost = window.location.origin.replace(/^http/, "ws");
    const socket = io(socketHost, { query: { userId: adminId } });

    socket.on("admin_notification", function (new_notification) {
      showToast(new_notification.title, new_notification.message);
      updateNotificationList(new_notification);

      const countBadge = document.getElementById('notification-count');
      const unreadCount = parseInt(countBadge.textContent) + 1 || 1;
      countBadge.style.display = 'inline';
      countBadge.textContent = unreadCount;
    });

    async function loadNotifications() {
      try {
        const response = await fetch('/admin/notifications');
        const data = await response.json();
        const notifications = data.data;
        const unreadCount = data.unread_count;
        const countBadge = document.getElementById('notification-count');
        list.innerHTML = '';

        if (notifications.length === 0) {
          list.innerHTML = '<p>Không có thông báo nào.</p>';
          return;
        }

        notifications.forEach((noti) => {
          updateNotificationList(noti);
        });

        if (unreadCount > 0) {
          countBadge.style.display = 'inline';
          countBadge.textContent = unreadCount;
        } else {
          countBadge.style.display = 'none';
        }

      } catch (err) {
        console.error('Lỗi khi load thông báo:', err);
        list.innerHTML = '<p style="color:red;">Lỗi khi tải thông báo.</p>';
      }
    }
    loadNotifications();

    function updateNotificationList(notification) {
      const li = document.createElement('li');
      li.classList.add('list-group-item', 'border', 'mb-2');
      li.setAttribute('data-id', notification._id);

      const header = document.createElement('div');
      header.classList.add('d-flex', 'justify-content-between', 'align-items-center', 'cursor-pointer');

      const title = document.createElement('strong');
      title.textContent = notification.title;

      const rightInfo = document.createElement('div');
      rightInfo.classList.add('d-flex', 'align-items-center', 'gap-2');

      const time = document.createElement('span');
      time.classList.add('small', 'text-muted');
      time.textContent = formatTime(new Date(notification.created_at));

      const statusDot = document.createElement('span');
      statusDot.style.width = '10px';
      statusDot.style.height = '10px';
      statusDot.style.borderRadius = '50%';
      statusDot.style.display = 'inline-block';
      statusDot.style.backgroundColor = notification.is_read ? 'green' : 'red';
      statusDot.style.flexShrink = '0';


      rightInfo.appendChild(time);
      rightInfo.appendChild(statusDot);

      header.appendChild(title);
      header.appendChild(rightInfo);

      const messageDiv = document.createElement('div');
      messageDiv.classList.add('mt-2', 'text-secondary');

      messageDiv.innerHTML = notification.message.replace(/\n/g, '<br>');

      messageDiv.style.display = 'none';

      const orderLink = document.createElement('a');
      orderLink.href = `/orders/${notification.order_id}/detail`;
      orderLink.textContent = 'Chi tiết đơn hàng';
      orderLink.classList.add('d-block', 'mt-2', 'text-primary');
      orderLink.target = '_blank';

      messageDiv.appendChild(orderLink);

      header.addEventListener('click', () => {
        const isVisible = messageDiv.style.display === 'block';
        messageDiv.style.display = isVisible ? 'none' : 'block';

        if (!notification.is_read) {
          markAsRead(notification._id);
          notification.is_read = true;
          statusDot.style.backgroundColor = 'green';
        }
      });

      li.appendChild(header);
      li.appendChild(messageDiv);

      list.insertBefore(li, list.firstChild);
    }
    function formatTime(dateStr) {
      const date = new Date(dateStr);
      const hours = date.getHours().toString().padStart(2, '0');
      const minutes = date.getMinutes().toString().padStart(2, '0');
      const day = date.getDate().toString().padStart(2, '0');
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const year = date.getFullYear();

      return `${hours}:${minutes} ngày ${day}/${month}/${year}`;
    }


    //function markAsRead(id) {
    //const li = document.querySelector(`li[data-id="${id}"]`);
    //li.classList.remove('unread');
    //li.classList.add('text-muted');
    //}

    function markAsRead(id) {
      fetch(`/admin/notifications/read/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        }
      })
        .then(res => {
          if (!res.ok) throw new Error('Không thể cập nhật trạng thái');
          return res.json();
        })
        .then(() => {
          const li = document.querySelector(`li[data-id="${id}"]`);
          if (li) {
            li.classList.remove('unread');
            li.classList.add('text-muted');
          }

          const countBadge = document.getElementById('notification-count');
          if (countBadge && countBadge.style.display !== 'none') {
            let current = parseInt(countBadge.textContent);
            if (!isNaN(current) && current > 1) {
              countBadge.textContent = current - 1;
            } else {
              countBadge.style.display = 'none';
            }
          }

        })
        .catch(err => {
          console.error('Lỗi khi cập nhật trạng thái thông báo:', err);
        });
    }



    function showToast(title, message) {
      const toastId = `toast-${Date.now()}`;
      const toastHTML = `
    <div style="z-index:9999" id="${toastId}" class="toast align-items-center text-white bg-primary border-0" role="alert"
      aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body">
          <div class="toast-title"><strong>${title}</strong></div>
          <div class="toast-message">${message}</div>
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
          aria-label="Close"></button>
      </div>
    </div>
  `;
      document.getElementById('toast-container').innerHTML += toastHTML;
      const toastElement = document.getElementById(toastId);
      const toastInstance = new bootstrap.Toast(toastElement, { delay: 5000 });
      toastInstance.show();
    }


  });
</script>