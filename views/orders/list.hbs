<div class="container mt-5">
    <div class="product-header mb-4 p-3 bg-light rounded">
        <div class="d-flex justify-content-between align-items-center">
            <span class="h5 mb-0"><span data-lang="orders">Orders</span></span>
        </div>
    </div>
    <div class="row g-2 align-items-center">
        <div class="col-md-4">
            <input type="text" id="searchOrder" class="form-control" placeholder="T√¨m theo m√£ ƒë∆°n ho·∫∑c t√™n kh√°ch h√†ng"
                value="{{filters.search}}">
        </div>
        <div class="col-md-4">
            <select id="filterStatus" class="form-select">
                <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                <option value="pending" {{#ifCond filters.status "pending" }}selected{{/ifCond}}>Ch·ªù x√°c nh·∫≠n</option>
                <option value="confirmed" {{#ifCond filters.status "confirmed" }}selected{{/ifCond}}>ƒê√£ x√°c nh·∫≠n</option>
                <option value="delivering" {{#ifCond filters.status "delivering" }}selected{{/ifCond}}>ƒêang giao</option>
                <option value="delivered" {{#ifCond filters.status "delivered" }}selected{{/ifCond}}>Giao th√†nh c√¥ng
                </option>
                <option value="canceled" {{#ifCond filters.status "canceled" }}selected{{/ifCond}}>ƒê√£ h·ªßy</option>
                {{!-- <option value="cancel_request" {{#ifCondfilters. statusStatus "cancel_request" }}selected{{/ifCond}}>Y√™u c·∫ßu h·ªßy
                </option> --}}
                <option value="cancel_request" {{#ifCond filters.status "cancel_request" }}selected{{/ifCond}}>Y√™u c·∫ßu h·ªßy</option>

                {{!-- <option value="return_request" {{#ifCond filterStatus "return_request" }}selected{{/ifCond}}>Y√™u c·∫ßu tr·∫£
                    h√†ng</option> --}}
            </select>
        </div>
        <div class="col-md-2">
            <select id="sortOrders" class="form-select">
                <option value="created_at_desc" {{#ifCond filters.sort "created_at_desc" }}selected{{/ifCond}}>M·ªõi nh·∫•t</option>
                <option value="created_at_asc" {{#ifCond filters.sort "created_at_asc" }}selected{{/ifCond}}>C≈© nh·∫•t</option>
                <option value="total_price_desc" {{#ifCond filters.sort "total_price_desc" }}selected{{/ifCond}}>Gi√° cao nh·∫•t
                </option>
                <option value="total_price_asc" {{#ifCond filters.sort "total_price_asc" }}selected{{/ifCond}}>Gi√° th·∫•p nh·∫•t
                </option>
            </select>
        </div>
        <div class="col-md-2">
            <button id="btnSearchOrder" class="btn btn-primary w-100">T√¨m ki·∫øm</button>
        </div>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>M√£ ƒë∆°n</th>
                <th>Kh√°ch h√†ng</th>
                <th>T·ªïng ti·ªÅn</th>
                <th>Tr·∫°ng th√°i</th>
                <th>Ng√†y ƒë·∫∑t</th>
                <th>Ph∆∞∆°ng th·ª©c thanh to√°n</th>
                <th>H√†nh ƒë·ªông</th>
            </tr>
        </thead>
        <tbody>
            {{#each orders}}
            <tr>
                <td>
                    {{#if this.order_code}}
                    #{{this.order_code}}
                    {{else}}
                    <span class="text-muted">Ch∆∞a c√≥ m√£</span>
                    {{/if}}
                </td>
                <td>{{this.to_name}}</td>
                <td>{{formatPrice this.total_price}} VND</td>
                <td>
                    <span class="badge {{getStatusClass this.status}}">{{getStatusText this.status}}</span>
                </td>


                <td class="date-format" data-created-at="{{this.created_at}}">{{this.created_at}}</td>
                <td>
                    <span class="badge {{getPaymentClass this.payment_method}}">{{this.payment_method}}</span>
                </td>
                <td><a href="/orders/{{this._id}}/detail" class="btn btn-primary btn-sm">Chi ti·∫øt</a></td>

            </tr>
            {{/each}}
        </tbody>
    </table>

    <nav>
        <ul class="pagination justify-content-center">
            {{#if (gt currentPage 1)}}
            <li class="page-item">
                <a class="page-link" href="?page={{sub currentPage 1}}&limit={{limit}}">Trang tr∆∞·ªõc</a>
            </li>
            {{/if}}

            <li class="page-item disabled">
                <span class="page-link">Trang {{currentPage}} / {{totalPages}}</span>
            </li>

            {{#if (lt currentPage totalPages)}}
            <li class="page-item">
                <a class="page-link" href="?page={{add currentPage 1}}&limit={{limit}}">Trang sau</a>
            </li>
            {{/if}}
        </ul>
    </nav>
</div>
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="toastMessage" class="toast align-items-center text-white bg-success border-0" role="alert"
        aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="toastBody">
                <!-- Message will be inserted here -->
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                aria-label="Close"></button>
        </div>
    </div>
</div>
<script src="/socket.io/socket.io.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        formatDates();


        document.getElementById("btnSearchOrder").addEventListener("click", function () {
            const search = document.getElementById("searchOrder").value.trim();
            const status = document.getElementById("filterStatus").value;
            const sort = document.getElementById("sortOrders").value;

            window.location.href = `?page=1&limit=10&search=${search}&status=${status}&sort=${sort}`;
        });


        const socket = io();
        socket.on("new_order", function (order) {
            showToast("üì¢ B·∫°n v·ª´a c√≥ m·ªôt ƒë∆°n h√†ng m·ªõi!", "bg-info");
        });
        socket.on("cancel_request", function (order) {
            showToast("‚ö†Ô∏è C√≥ y√™u c·∫ßu h·ªßy ƒë∆°n h√†ng!", "bg-warning");
        });

        socket.on("return_request", function (order) {
            showToast("üîÑ C√≥ y√™u c·∫ßu tr·∫£ h√†ng!", "bg-danger");
        });

        function formatDates() {
            document.querySelectorAll(".date-format").forEach(element => {
                const timestamp = element.dataset.createdAt;
                if (timestamp) {
                    const date = new Date(timestamp);
                    element.innerText = date.toLocaleString("vi-VN", {
                        year: "numeric",
                        month: "2-digit",
                        day: "2-digit",
                        hour: "2-digit",
                        minute: "2-digit",
                        hour12: false
                    });
                }
            });
        }

        function getStatusClass(status) {
            switch (status) {
                case "pending": return "bg-warning";
                case "confirmed": return "bg-primary";
                case "ready_to_pick": return "bg-info";
                case "picking": return "bg-info";
                case "picked": return "bg-success";
                case "delivering": return "bg-primary";
                case "money_collect_delivering": return "bg-primary";
                case "delivered": return "bg-success";
                case "delivery_fail": return "bg-danger";
                case "waiting_to_return": return "bg-warning";
                case "return": return "bg-secondary";
                case "returned": return "bg-success";
                case "return_fail": return "bg-danger";
                case "canceled": return "bg-danger";
                default: return "bg-secondary";
            }
        }

        function getStatusText(status) {
            switch (status) {
                case "pending": return "Ch·ªù x√°c nh·∫≠n";
                case "confirmed": return "ƒê√£ x√°c nh·∫≠n";
                case "ready_to_pick": return "Ch·ªù l·∫•y h√†ng";
                case "picking": return "ƒêang l·∫•y h√†ng";
                case "picked": return "ƒê√£ l·∫•y h√†ng";
                case "delivering": return "ƒêang giao";
                case "money_collect_delivering": return "ƒêang giao (COD)";
                case "delivered": return "Giao th√†nh c√¥ng";
                case "delivery_fail": return "Giao th·∫•t b·∫°i";
                case "waiting_to_return": return "Ch·ªù ho√†n h√†ng";
                case "return": return "ƒêang ho√†n h√†ng";
                case "returned": return "ƒê√£ ho√†n h√†ng";
                case "return_fail": return "Ho√†n h√†ng th·∫•t b·∫°i";
                case "canceled": return "ƒê√£ h·ªßy";
                default: return "Kh√¥ng x√°c ƒë·ªãnh";
            }
        }

        function getPaymentClass(method) {
            switch (method) {
                case "COD": return "bg-secondary";
                case "MOMO": return "bg-pink";
                case "VNPAY": return "bg-blue";
                default: return "bg-dark";
            }
        }

        function showToast(message, bgClass = "bg-success") {
            const toastElement = document.getElementById("toastMessage");
            const toastBody = document.getElementById("toastBody");

            toastBody.textContent = message;
            toastElement.classList.remove("bg-success", "bg-danger");
            toastElement.classList.add(bgClass);

            const toast = new bootstrap.Toast(toastElement);
            toast.show();
        }

    });

</script>





{{!-- document.getElementById("searchOrder").addEventListener("input", function () {
const query = this.value.trim();
window.location.href = `?page=1&limit=10&search=${query}`;
});

document.getElementById("filterStatus").addEventListener("change", function () {
const status = this.value;
window.location.href = `?page=1&limit=10&status=${status}&search={{search}}&sort={{sort}}`;
});

document.getElementById("sortOrders").addEventListener("change", function () {
const sort = this.value;
window.location.href = `?page=1&limit=10&status={{filterStatus}}&search={{search}}&sort=${sort}`;
}); --}}