<div class="container">
    <a href="" class="btn btn-secondary mb-4 mt-4" id="backBtn">
        <i class="bi bi-arrow-left-circle"></i> Quay lại
    </a>


    <h3 class="mb-4">Chi Tiết Đơn Hàng #{{order.order_code}}</h3>

    <!-- Thông tin đơn hàng -->
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Thông Tin Đơn Hàng</h5>
            <br>
            <p><strong>Người nhận:</strong> {{order.to_name}}</p>
            <p><strong>Số điện thoại:</strong> {{order.to_phone}}</p>
            <p><strong>Địa chỉ:</strong> {{order.to_address}}, {{userAddress.ward.WardName}},
                {{userAddress.district.DistrictName}}, {{userAddress.province.ProvinceName}}</p>

            <p class="date-format" data-created-at="{{order.created_at}}"><strong>Ngày đặt:</strong>
                {{order.created_at}}
            </p>
            {{#if (eq order.status "delivered")}}
            <p class="date-format" data-delivered-at="{{order.delivered_at}}">
                <strong>Ngày nhận hàng:</strong> {{order.delivered_at}}
            </p>
            {{/if}}

            <p>
                <strong>Phương thức thanh toán:</strong>
                <span class="badge bg-primary">{{order.payment_method}}</span>

                {{#if (eq order.payment_method "ONLINE")}}
                {{#if (or (eq order.payment_status "paid") (eq order.payment_status "refunded"))}}
                <span class="badge bg-success">Đã thanh toán</span>
                {{else}}
                <span class="badge bg-danger">
                    Chưa thanh toán
                    <span id="countdown" class="fw-bold"></span>
                </span>
                {{/if}}
                {{/if}}

            </p>

            <p><strong>Tổng tiền:</strong> {{formatPrice order.total_price}} VND</p>

            <p><strong>Trạng thái:</strong>
                <span class="status-badge bg-warning">{{getStatusText order.status}}</span>

                {{#if (eq order.payment_status "refunded")}}
                <span class="badge bg-info ms-2">Đã hoàn tiền</span>
                {{/if}}
            </p>

            <div class="mt-3">
                {{#if (eq order.status "pending")}}
                <button class="btn btn-primary" onclick="confirmOrder('{{order._id}}')">Xác nhận đơn hàng</button>
                <button class="btn btn-danger" onclick="rejectOrder('{{order._id}}')">Từ chối đơn hàng</button>
                {{/if}}

                {{#if (and (eq order.status "confirmed") (not order.cancel_request))}}
                {{#if (eq order.payment_method "COD")}}
                <button class="btn btn-success" onclick="readyToShip('{{order._id}}')">Sẵn sàng giao hàng</button>
                {{else}}
                {{#if (eq order.payment_status "paid")}}
                <button class="btn btn-success" onclick="readyToShip('{{order._id}}')">Sẵn sàng giao hàng</button>
                {{else}}
                <p class="text-danger">⚠ Không thể chuyển trạng thái vì đơn hàng chưa được thanh toán.</p>
                {{/if}}
                {{/if}}
                {{/if}}

                {{#if (or
                (and (or (eq order.status "confirmed") (eq order.status "ready_to_pick")) order.cancel_request)
                (and (eq order.status "pending") (neq order.payment_method "COD") order.cancel_request)
                )}}
                <button class="btn btn-danger" onclick="approveCancel('{{order._id}}')">Đồng ý hủy đơn</button>

                {{/if}}
            </div>


        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <h5>Danh Sách Sản Phẩm</h5>
            <table class="table table-bordered mt-3">
                <thead class="table-light">
                    <tr>
                        <th style="width: 5%;">#</th>
                        <th style="width: 10%;">Hình ảnh</th>
                        <th style="width: 45%;">Tên sản phẩm</th>
                        <th style="width: 20%;">Lô hàng</th>
                        <th style="width: 10%;">Số lượng</th>
                        <th style="width: 15%;">Giá</th>
                        <th style="width: 15%;">Tổng</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each orderItems}}
                    <tr>
                        <td>{{addOne @index}}</td>
                        <td><img src="{{this.image_url}}" alt="Hình ảnh sản phẩm" width="50"></td>
                        <td>{{this.product_product_type_id.product_id.name}}
                            <small class="text-muted">({{this.product_product_type_id.product_type_id.name}})</small>
                        </td>
                        <td>
                            {{#if this.batches}}
                            {{#each this.batches}}
                            <div class="mb-2">
                                <div><strong>Mã lô hàng: <a href="/products/{{this.product_product_type_id.product_id._id}}/import-stock">{{batch_number}}</a></strong></div>
                                <div>Số lượng: <strong>{{quantity}}</strong></div>
                                <small class="text-muted">
                                    HSD: {{#if expiry_date}}{{formatDate expiry_date}}{{else}}N/A{{/if}}
                                </small>
                            </div>
                            {{/each}}
                            {{else}}
                            Không có thông tin lô hàng
                            {{/if}}
                        </td>

                        <td>{{this.quantity}}</td>
                        <td>{{formatPrice this.price}} VND</td>
                        <td>{{multiplyAndFormat this.quantity this.price}} VND</td>
                    </tr>
                    {{/each}}

                    <tr>
                        <td colspan="5" class="text-end"><strong>Phí vận chuyển</strong></td>
                        <td>{{formatPrice order.shipping_fee}} VND</td>
                    </tr>
                    <tr>
                        <td colspan="5" class="text-end"><strong>Tổng thanh toán</strong></td>
                        <td><strong>{{formatPrice order.total_price}} VND</strong></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="toastMessage" class="toast align-items-center text-white bg-success border-0" role="alert"
        aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="toastBody">

            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                aria-label="Close"></button>
        </div>
    </div>
</div>

<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Xác nhận cập nhật trạng thái</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Bạn có chắc chắn muốn <strong id="selectedStatusText"></strong>
                không?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-success" id="confirmUpdateStatus">Xác nhận</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static"
    data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-4 d-flex align-items-center justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Đang xử lý...</span>
            </div>
            <p class="mt-2">Đang cập nhật trạng thái, vui lòng chờ...</p>
        </div>
    </div>
</div>


<div class="modal fade" id="refundModal" tabindex="-1" aria-labelledby="refundModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="refundModalLabel">Quét QR để hoàn tiền</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div id="qrCodeContainer">
                    <img id="qrCodeImage" src="" alt="QR Hoàn Tiền" class="img-fluid">
                </div>
                <div id="loadingQr" class="d-none">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Đang tạo QR code...</p>
                </div>
            </div>

        </div>
    </div>
</div>

<div class="modal fade" id="rejectOrderModal" tabindex="-1" aria-labelledby="rejectOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rejectOrderModalLabel">Từ chối đơn hàng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="rejectOrderForm">
                    <div class="mb-3">
                        <label for="rejectReason" class="form-label">Lý do từ chối</label>
                        {{#each rejectReasons}}
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="rejectReason" id="reason{{this.code}}"
                                value="{{this.code}}">
                            <label class="form-check-label" for="reason{{this.code}}">
                                {{this.reason}}
                            </label>
                        </div>
                        {{/each}}
                    </div>
                    <div class="mb-3" id="otherReasonInput" style="display: none;">
                        <label for="otherReason" class="form-label">Lý do khác (bắt buộc)</label>
                        <textarea class="form-control" id="otherReason" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmRejectBtn"
                    data-payment-method="{{order.payment_method}}" onclick="confirmRejectOrder()">Từ
                    chối đơn hàng</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById('backBtn').addEventListener('click', function (e) {
            e.preventDefault();

            window.history.go(-1);
        });

        formatDates();
        startCountdown();
    });

    function openConfirmModal(statusText, callback) {
        document.getElementById("selectedStatusText").textContent = statusText;
        const confirmButton = document.getElementById("confirmUpdateStatus");

        confirmButton.replaceWith(confirmButton.cloneNode(true));
        document.getElementById("confirmUpdateStatus").addEventListener("click", function () {
            callback();
            const modal = bootstrap.Modal.getInstance(document.getElementById("confirmModal"));
            modal.hide();
        });

        new bootstrap.Modal(document.getElementById("confirmModal")).show();
    }

    function sendRequest(url, method = "POST", body = null) {
        const loadingModal = new bootstrap.Modal(document.getElementById("loadingModal"));
        loadingModal.show();
        const options = {
            method,
            headers: { "Content-Type": "application/json" }
        };

        if (body) options.body = JSON.stringify(body);

        fetch(url, options)
            .then(response => response.json())
            .then(data => {
                loadingModal.hide();
                if (data.status == 200) {
                    showToast(data.message, "bg-success");
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast("Lỗi: " + data.message, "bg-danger");
                }
            })
            .catch(error => {
                console.error("Lỗi:", error);
                loadingModal.hide();
                showToast("Đã xảy ra lỗi.", "bg-danger");
            });
    }

    function confirmOrder(orderId) {
        openConfirmModal("Xác nhận đơn hàng", () => sendRequest(`/orders/${orderId}/confirm`, 'PUT'));
    }

    function readyToShip(orderId) {
        openConfirmModal("Sẵn sàng giao hàng", () => sendRequest(`/orders/${orderId}/send-to-ghn`, 'PUT'));
    }

    function approveCancel(orderId) {
        const isOnlinePaid = "{{order.payment_method}}" === "ONLINE" && "{{order.payment_status}}" === "paid";

        if (isOnlinePaid) {
            showRefundModal(orderId);
        } else {
            openConfirmModal("Đồng ý hủy đơn", () => sendRequest(`/orders/${orderId}/cancel`, "POST", { action: "accept" }));
        }
    }

    function rejectCancel(orderId) {
        openConfirmModal("Từ chối yêu cầu hủy", () => sendRequest(`/orders/${orderId}/cancel`, "POST", { action: "reject" }));
    }

    function showRefundModal(orderId) {
        const modal = new bootstrap.Modal(document.getElementById('refundModal'));
        const qrImage = document.getElementById('qrCodeImage');
        const loading = document.getElementById('loadingQr');

        loading.classList.remove('d-none');
        qrImage.style.display = 'none';

        fetch(`/orders/${orderId}/refund-qr`)
            .then(response => response.json())
            .then(data => {
                if (data.qrLink) {
                    qrImage.src = data.qrLink;
                    loading.classList.add('d-none');
                    qrImage.style.display = 'block';
                    checkOrderStatus(orderId);
                }
            })
            .catch(error => {
                console.error('Lỗi khi lấy QR code:', error);
                showToast("Lỗi khi tạo QR hoàn tiền", "bg-danger");
                modal.hide();
            });

        modal.show();
    }

    function startCountdown() {
        const countdownElement = document.getElementById("countdown");
        if (!countdownElement) return;

        const createdAt = new Date("{{order.created_at}}"); // Lấy thời gian tạo đơn
        const expireTime = new Date(createdAt.getTime() + 10 * 60000); // Hết hạn sau 10 phút

        function updateCountdown() {
            const now = new Date();
            const diff = Math.max(0, Math.floor((expireTime - now) / 1000)); // Số giây còn lại
            const minutes = Math.floor(diff / 60);
            const seconds = diff % 60;

            if (diff > 0) {
                countdownElement.textContent = ` (Hủy sau: ${minutes} phút ${seconds} giây)`;
            } else {
                countdownElement.textContent = " (Đơn hàng đã hết hạn)";
                countdownElement.classList.remove("text-danger");
                countdownElement.classList.add("text-muted");
            }
        }

        updateCountdown();
        setInterval(updateCountdown, 1000);
    }

    function formatDates() {
        document.querySelectorAll(".date-format").forEach(element => {
            const timestamp = element.dataset.createdAt;
            if (timestamp) {
                const date = new Date(timestamp);
                const formattedDate = date.toLocaleString("vi-VN", {
                    year: "numeric",
                    month: "2-digit",
                    day: "2-digit",
                    hour: "2-digit",
                    minute: "2-digit",
                    hour12: false
                });
                element.innerHTML = `<strong>Ngày đặt:</strong> ${formattedDate}`;
            }
        });
    }
    let statusIntervalId = null;

    function checkOrderStatus(orderId) {
        statusIntervalId = setInterval(() => {
            fetch(`/orders/payment_status/${orderId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === 200) {
                        clearInterval(statusIntervalId);
                        closeQrModal();

                        showToast("Hoàn tiền thành công!", "bg-success");
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi gọi API:", error);
                });
        }, 10000);
    }

    function closeQrModal() {
        const refundModal = bootstrap.Modal.getInstance(document.getElementById("refundModal"));
        if (refundModal) {
            refundModal.hide();
        }
    }

    function showToast(message, bgClass = "bg-success") {
        const toastElement = document.getElementById("toastMessage");
        const toastBody = document.getElementById("toastBody");

        toastBody.textContent = message;
        toastElement.classList.remove("bg-success", "bg-danger");
        toastElement.classList.add(bgClass);

        const toast = new bootstrap.Toast(toastElement);
        toast.show();
    }

    function rejectOrder(orderId) {
        document.getElementById("rejectOrderForm").reset();
        document.getElementById("otherReasonInput").style.display = "none";

        document.getElementById("confirmRejectBtn").setAttribute('data-order-id', orderId);

        var rejectModal = new bootstrap.Modal(document.getElementById('rejectOrderModal'));
        rejectModal.show();
    }

    document.querySelectorAll('input[name="rejectReason"]').forEach((radioButton) => {
        radioButton.addEventListener('change', function () {
            if (this.value === "OTHER") {
                document.getElementById("otherReasonInput").style.display = "block";
            } else {
                document.getElementById("otherReasonInput").style.display = "none";
            }
        });
    });

    function confirmRejectOrder() {
        const selectedReason = document.querySelector('input[name="rejectReason"]:checked');
        const otherReason = document.getElementById("otherReason").value.trim();

        if (!selectedReason) {
            showToast("Vui lòng chọn lý do từ chối.", "bg-danger");
            return;
        }

        let rejectReason = selectedReason.value;
        if (rejectReason === "OTHER" && !otherReason) {
            showToast("Vui lòng nhập lý do khác.", "bg-danger");
            return;
        }

        const orderId = document.getElementById("confirmRejectBtn").getAttribute('data-order-id');
        const paymentMethod = document.getElementById("confirmRejectBtn").getAttribute('data-payment-method');

        const reasonToSend = rejectReason === "OTHER" ? { reason: rejectReason, value: otherReason } : { reason: rejectReason, value: '' };

        const modalElement = document.getElementById('rejectOrderModal');
        const modalInstance = bootstrap.Modal.getInstance(modalElement);
        modalInstance.hide();

        if (paymentMethod === "ONLINE") {

            const modal = new bootstrap.Modal(document.getElementById('refundModal'));
            const qrImage = document.getElementById('qrCodeImage');
            const loading = document.getElementById('loadingQr');

            loading.classList.remove('d-none');
            qrImage.style.display = 'none';

            modal.show();

            fetch(`/orders/${orderId}/reject`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(reasonToSend)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.qrLink) {
                        qrImage.src = data.qrLink;
                        loading.classList.add('d-none');
                        qrImage.style.display = 'block';
                        checkOrderStatus(orderId);
                        modal.show();
                    }
                })
                .catch(error => {
                    console.error('Lỗi khi từ chối đơn hàng:', error);
                    showToast("Lỗi khi từ chối đơn hàng", "bg-danger");
                });
        } else {
            sendRequest(`/orders/${orderId}/reject`, 'PUT', reasonToSend);
        }
    }


</script>