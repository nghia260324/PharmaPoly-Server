<div class="container mt-4">
    <a href="/orders" class="btn btn-outline-secondary mb-3">
        <i class="bi bi-arrow-left"></i> Quay l·∫°i
    </a>


    <h3 class="mb-4">Chi Ti·∫øt ƒê∆°n H√†ng #{{order.order_code}}</h3>

    <!-- Th√¥ng tin ƒë∆°n h√†ng -->
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Th√¥ng Tin ƒê∆°n H√†ng</h5>
            <br>
            <p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> {{order.to_name}}</p>
            <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {{order.to_phone}}</p>
            <p><strong>ƒê·ªãa ch·ªâ:</strong> {{order.to_address}}, {{userAddress.ward.WardName}},
                {{userAddress.district.DistrictName}}, {{userAddress.province.ProvinceName}}</p>

            <p class="date-format" data-created-at="{{order.created_at}}"><strong>Ng√†y ƒë·∫∑t:</strong>
                {{order.created_at}}
            </p>
            {{!-- <p><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> <span
                    class="badge bg-primary">{{order.payment_method}}</span>
            </p> --}}
            <p>
                <strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong>
                <span class="badge bg-primary">{{order.payment_method}}</span>

                {{#if (eq order.payment_method "ONLINE")}}
                {{#if (eq order.payment_status 'paid')}}
                <span class="badge bg-success">ƒê√£ thanh to√°n</span>
                {{else}}
                <span class="badge bg-danger">
                    Ch∆∞a thanh to√°n
                    <span id="countdown" class="fw-bold"></span>
                </span>
                {{/if}}
                {{/if}}
            </p>


            <p><strong>T·ªïng ti·ªÅn:</strong> {{order.total_price}} VND</p>
            {{!-- <p><strong>Tr·∫°ng th√°i:</strong> <span class="status-badge bg-warning">{{order.status}}</span></p> --}}
            <p><strong>Tr·∫°ng th√°i:</strong>
                <span class="status-badge bg-warning">{{getStatusText order.status}}</span>
            </p>

            {{!--
            <div class="mt-3">
                {{#if (eq order.status "pending")}}
                <button class="btn btn-primary" onclick="confirmOrder('{{order._id}}')">X√°c nh·∫≠n ƒë∆°n h√†ng</button>
                {{/if}}

                {{#if (eq order.status "confirmed")}}
                {{#if (eq order.payment_method "COD")}}
                <button class="btn btn-success" onclick="readyToShip('{{order._id}}')">S·∫µn s√†ng giao h√†ng</button>
                {{else}}
                {{#if (eq order.payment_status "paid")}}
                <button class="btn btn-success" onclick="readyToShip('{{order._id}}')">S·∫µn s√†ng giao h√†ng</button>
                {{else}}
                <p class="text-danger">‚ö† Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i v√¨ ƒë∆°n h√†ng ch∆∞a ƒë∆∞·ª£c thanh to√°n.</p>
                {{/if}}
                {{/if}}
                {{/if}}

                {{#if (and (or (eq order.status "confirmed") (eq order.status "ready_to_pick")) order.cancel_request)}}
                <button class="btn btn-danger" onclick="approveCancel('{{order._id}}')">ƒê·ªìng √Ω h·ªßy ƒë∆°n</button>
                <button class="btn btn-secondary" onclick="rejectCancel('{{order._id}}')">T·ª´ ch·ªëi y√™u c·∫ßu h·ªßy</button>
                {{/if}}

                {{#if (and (eq order.status "delivered") order.return_request)}}
                <button class="btn btn-warning" onclick="approveReturn('{{order._id}}')">X√°c nh·∫≠n y√™u c·∫ßu tr·∫£
                    h√†ng</button>
                <button class="btn btn-secondary" onclick="rejectReturn('{{order._id}}')">T·ª´ ch·ªëi y√™u c·∫ßu tr·∫£
                    h√†ng</button>
                {{/if}}
            </div> --}}

            <div class="mt-3">
                {{#if (eq order.status "pending")}}
                <button class="btn btn-primary" onclick="confirmOrder('{{order._id}}')">X√°c nh·∫≠n ƒë∆°n h√†ng</button>
                {{/if}}

                {{#if (eq order.status "confirmed")}}
                {{#if (eq order.payment_method "COD")}}
                <button class="btn btn-success" onclick="readyToShip('{{order._id}}')">S·∫µn s√†ng giao h√†ng</button>
                {{else}}
                {{#if (eq order.payment_status "paid")}}
                <button class="btn btn-success" onclick="readyToShip('{{order._id}}')">S·∫µn s√†ng giao h√†ng</button>
                {{else}}
                <p class="text-danger">‚ö† Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i v√¨ ƒë∆°n h√†ng ch∆∞a ƒë∆∞·ª£c thanh to√°n.</p>
                {{/if}}
                {{/if}}
                {{/if}}

                {{#if (and (or (eq order.status "confirmed") (eq order.status "ready_to_pick")) order.cancel_request)}}
                <button class="btn btn-danger" onclick="approveCancel('{{order._id}}')">ƒê·ªìng √Ω h·ªßy ƒë∆°n</button>
                <button class="btn btn-secondary" onclick="rejectCancel('{{order._id}}')">T·ª´ ch·ªëi y√™u c·∫ßu h·ªßy</button>
                {{/if}}
            </div>




        </div>
    </div>

    <!-- Danh s√°ch s·∫£n ph·∫©m -->
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Danh S√°ch S·∫£n Ph·∫©m</h5>
            <table class="table table-bordered mt-3">
                <thead class="table-light">
                    <tr>
                        <th>#</th>
                        <th>H√¨nh ·∫£nh</th>
                        <th>T√™n s·∫£n ph·∫©m</th>
                        <th>S·ªë l∆∞·ª£ng</th>
                        <th>Gi√°</th>
                        <th>T·ªïng</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each orderItems}}
                    <tr>
                        <td>{{addOne @index}}</td>
                        <td><img src="{{this.image_url}}" alt="H√¨nh ·∫£nh s·∫£n ph·∫©m" width="50"></td>
                        <td>{{this.product_id.name}}</td>
                        <td>{{this.quantity}}</td>
                        <td>{{this.price}} VND</td>
                        <td>{{multiply this.quantity this.price}} VND</td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>

        </div>
    </div>
</div>
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="toastMessage" class="toast align-items-center text-white bg-success border-0" role="alert"
        aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="toastBody">
                <!-- Message will be inserted here -->
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                aria-label="Close"></button>
        </div>
    </div>
</div>
<!-- Modal x√°c nh·∫≠n c·∫≠p nh·∫≠t tr·∫°ng th√°i -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">X√°c nh·∫≠n c·∫≠p nh·∫≠t tr·∫°ng th√°i</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh <strong id="selectedStatusText"></strong>
                kh√¥ng?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">H·ªßy</button>
                <button type="button" class="btn btn-success" id="confirmUpdateStatus">X√°c nh·∫≠n</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Loading -->
<div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static"
    data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content text-center p-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">ƒêang x·ª≠ l√Ω...</span>
            </div>
            <p class="mt-2">ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i, vui l√≤ng ch·ªù...</p>
        </div>
    </div>
</div>
<script src="/socket.io/socket.io.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {

        const socket = io();
        socket.on("new_order", function (order) {
            showToast("üì¢ B·∫°n v·ª´a c√≥ m·ªôt ƒë∆°n h√†ng m·ªõi!", "bg-info");
        });
        socket.on("cancel_request", function (order) {
            showToast("‚ö†Ô∏è C√≥ y√™u c·∫ßu h·ªßy ƒë∆°n h√†ng!", "bg-warning");
        });

        //socket.on("return_request", function (order) {
            //showToast("üîÑ C√≥ y√™u c·∫ßu tr·∫£ h√†ng!", "bg-danger");
        //});

        formatDates();
        startCountdown();
    });
    function openConfirmModal(statusText, callback) {
        document.getElementById("selectedStatusText").textContent = statusText;
        const confirmButton = document.getElementById("confirmUpdateStatus");

        confirmButton.replaceWith(confirmButton.cloneNode(true));
        document.getElementById("confirmUpdateStatus").addEventListener("click", function () {
            callback();
            const modal = bootstrap.Modal.getInstance(document.getElementById("confirmModal"));
            modal.hide();
        });

        new bootstrap.Modal(document.getElementById("confirmModal")).show();
    }
    function sendRequest(url, method = "POST", body = null) {
        const options = {
            method,
            headers: { "Content-Type": "application/json" }
        };

        if (body) options.body = JSON.stringify(body);

        fetch(url, options)
            .then(response => response.json())
            .then(data => {
                if (data.status == 200) {
                    showToast("Th√†nh c√¥ng!", "bg-success");
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast("L·ªói: " + data.message, "bg-danger");
                }
            })
            .catch(error => {
                console.error("L·ªói:", error);
                showToast("ƒê√£ x·∫£y ra l·ªói.", "bg-danger");
            });
    }


    function confirmOrder(orderId) {
        openConfirmModal("X√°c nh·∫≠n ƒë∆°n h√†ng", () => sendRequest(`/orders/${orderId}/confirm`, 'PUT'));
    }

    function readyToShip(orderId) {
        openConfirmModal("S·∫µn s√†ng giao h√†ng", () => sendRequest(`/orders/${orderId}/send-to-ghn`, 'PUT'));
    }

    function approveCancel(orderId) {
        openConfirmModal("ƒê·ªìng √Ω h·ªßy ƒë∆°n", () => sendRequest(`/orders/${orderId}/cancel`, "POST", { action: "accept" }));
    }

    function rejectCancel(orderId) {
        openConfirmModal("T·ª´ ch·ªëi y√™u c·∫ßu h·ªßy", () => sendRequest(`/orders/${orderId}/cancel`, "POST", { action: "reject" }));
    }

    //function approveReturn(orderId) {
        //openConfirmModal("X√°c nh·∫≠n y√™u c·∫ßu tr·∫£ h√†ng", () => sendRequest(`/orders/${orderId}/confirm-return`, "POST", { action: "approve" }));
    //}

    //function rejectReturn(orderId) {
        //openConfirmModal("T·ª´ ch·ªëi y√™u c·∫ßu tr·∫£ h√†ng", () => sendRequest(`/orders/${orderId}/confirm-return`, "POST", { action: "reject" }));
    //}


    function startCountdown() {
        const countdownElement = document.getElementById("countdown");
        if (!countdownElement) return; // N·∫øu kh√¥ng c√≥ ph·∫ßn ƒë·∫øm ng∆∞·ª£c, tho√°t lu√¥n

        const createdAt = new Date("{{order.created_at}}"); // L·∫•y th·ªùi gian t·∫°o ƒë∆°n
        const expireTime = new Date(createdAt.getTime() + 10 * 60000); // H·∫øt h·∫°n sau 10 ph√∫t

        function updateCountdown() {
            const now = new Date();
            const diff = Math.max(0, Math.floor((expireTime - now) / 1000)); // S·ªë gi√¢y c√≤n l·∫°i
            const minutes = Math.floor(diff / 60);
            const seconds = diff % 60;

            if (diff > 0) {
                countdownElement.textContent = ` (H·ªßy sau: ${minutes} ph√∫t ${seconds} gi√¢y)`;
            } else {
                countdownElement.textContent = " (ƒê∆°n h√†ng ƒë√£ h·∫øt h·∫°n)";
                countdownElement.classList.remove("text-danger");
                countdownElement.classList.add("text-muted");
            }
        }

        updateCountdown();
        setInterval(updateCountdown, 1000);
    }
    function formatDates() {
        document.querySelectorAll(".date-format").forEach(element => {
            const timestamp = element.dataset.createdAt;
            if (timestamp) {
                const date = new Date(timestamp);
                const formattedDate = date.toLocaleString("vi-VN", {
                    year: "numeric",
                    month: "2-digit",
                    day: "2-digit",
                    hour: "2-digit",
                    minute: "2-digit",
                    hour12: false
                });
                element.innerHTML = `<strong>Ng√†y ƒë·∫∑t:</strong> ${formattedDate}`;
            }
        });
    }
    function showToast(message, bgClass = "bg-success") {
        const toastElement = document.getElementById("toastMessage");
        const toastBody = document.getElementById("toastBody");

        toastBody.textContent = message;
        toastElement.classList.remove("bg-success", "bg-danger");
        toastElement.classList.add(bgClass);

        const toast = new bootstrap.Toast(toastElement);
        toast.show();
    }
</script>