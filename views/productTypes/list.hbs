<div class="d-flex justify-content-between align-items-center px-3 py-3 border-bottom"
    style="background-color: #343a40;">
    <form method="GET" class="d-flex" style="gap: 0.5rem;">
        <input type="text" name="search" class="form-control" placeholder="Tìm theo ID hoặc tên" value="{{search}}"
            style="min-width: 250px;">
        <button type="submit" class="btn btn-light">
            <i class="bi bi-search"></i>
        </button>
    </form>
</div>
<div class="container p-4">
    <div id="productTypeSection" class="product-type-section">
        <div class="card mb-4">
            <div class="card-body">
                <h5><span data-lang="add_new_product_type">Add New Product Type</span></h5>
                <form id="productTypeForm" class="row g-3">
                    <input type="hidden" id="productTypeId">
                    <div class="col-md-6">
                        <input type="text" class="form-control" id="productTypeName"
                            data-lang-placeholder="product_type_name" placeholder="Product Type Name" required>
                    </div>
                    <div class="col-md-6">
                        <button type="button" class="btn btn-primary">
                            {{!-- <span data-lang="save">Save</span> --}}
                            <i class="bi bi-save"></i>
                            <span data-lang="save">Save</span>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="card mb-4">
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th style="width: 35%;">ID</th>
                        <th>
                            Tên loại sản phẩm
                            <a href="?sort={{#if (eq sort 'name_asc')}}name_desc{{else}}name_asc{{/if}}"
                                class="ms-1 text-decoration-none">
                                {{#if (eq sort 'name_asc')}}
                                <i class="bi bi-sort-alpha-down"></i>
                                {{else if (eq sort 'name_desc')}}
                                <i class="bi bi-sort-alpha-up"></i>
                                {{else}}
                                <i class="bi bi-arrow-down-up"></i>
                                {{/if}}
                            </a>
                        </th>
                        <th style="width: 10%;">
                            Hành động
                        </th>
                    </tr>
                </thead>
                <tbody>
                    {{#each productTypes}}
                    <tr class="product-type-card" data-id="{{this._id}}" data-name="{{this.name}}">
                        <td>{{this._id}}</td>
                        <td>{{this.name}}</td>
                        <td>
                            <div class="d-flex align-item-center justify-content-center">

                                <button class="btn btn-sm btn-warning me-2" onclick="editProductType(this)">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                {{!-- <button class="btn btn-sm btn-danger" onclick="deleteProductType(this)">
                                    <i class="bi bi-trash"></i>
                                </button> --}}
                            </div>
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
            {{#unless productTypes.length}}
            <div class="text-center text-muted py-3">
                <i class="bi bi-search display-6 d-block mb-2"></i>
                <h5>Không tìm thấy loại sản phẩm nào</h5>
                <p>Hãy thử điều chỉnh từ khóa tìm kiếm hoặc bộ lọc.</p>
            </div>
            {{/unless}}
        </div>
        <nav>
            <ul class="pagination justify-content-center">
                {{#if (gt currentPage 1)}}
                <li class="page-item">
                    <a class="page-link" href="?page={{sub currentPage 1}}&limit={{limit}}">Trang trước</a>
                </li>
                {{/if}}

                <li class="page-item disabled">
                    <span class="page-link">Trang {{currentPage}} / {{totalPages}}</span>
                </li>

                {{#if (lt currentPage totalPages)}}
                <li class="page-item">
                    <a class="page-link" href="?page={{add currentPage 1}}&limit={{limit}}">Trang sau</a>
                </li>
                {{/if}}
            </ul>
        </nav>
    </div>
</div>
<!-- Bootstrap Toast Notification -->
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="toastMessage" class="toast align-items-center text-white bg-success border-0" role="alert"
        aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <span data-lang="product_type_added_successfully!">Đã thêm loại sản phẩm thành công!</span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                aria-label="Close"></button>
        </div>
    </div>
</div>


<div class="modal fade" id="editProductTypeModal" tabindex="-1" aria-labelledby="editProductTypeModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        {{!-- modal-dialog-centered --}}
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProductTypeModalLabel">Chỉnh sửa loại sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editProductTypeForm">
                    <input type="hidden" id="editProductTypeId">
                    <div class="mb-3">
                        <label for="editProductTypeIdDisplay" class="form-label">ID</label>
                        <input type="text" class="form-control" id="editProductTypeIdDisplay" disabled>
                    </div>

                    <div class="mb-3">
                        <label for="editProductTypeName" class="form-label">Tên loại sản phẩm</label>
                        <input type="text" class="form-control" id="editProductTypeName" placeholder="Product Type Name"
                            required>
                    </div>

                    <!-- Submit button -->
                    <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Popup Modal Confirmation for Delete -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this product type?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelector(".btn-primary").addEventListener("click", saveProductType);
    });

    async function saveProductType() {
        event.preventDefault();

        const nameInput = document.getElementById("productTypeName");

        const productTypeName = nameInput.value.trim();
        if (!productTypeName) {
            showToast("Vui lòng nhập tên loại sản phẩm!", "danger");
            return;
        }

        try {
            const response = await fetch("/product-types/add", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ name: productTypeName })
            });

            const result = await response.json();
            if (result.status === 200) {
                showToast(result.message, "success");

                nameInput.value = '';
                setTimeout(() => {
                    location.reload();
                }, 1000);
            } else {
                showToast(result.message, "danger");
            }
        } catch (error) {
            showToast("Đã xảy ra lỗi, vui lòng thử lại!", "danger");
        }
    }

    function deleteProductType(button) {
        const productTypeCard = button.closest('.product-type-card');
        const productTypeId = productTypeCard.getAttribute("data-id");

        if (!productTypeId) {
            showToast("Không tìm thấy ID loại sản phẩm!", "danger");
            return;
        }

        const modal = new bootstrap.Modal(document.getElementById('deleteConfirmationModal'));
        modal.show();

        document.getElementById("confirmDeleteBtn").onclick = function () {

            fetch(`/product-types/delete/${productTypeId}`, {
                method: "DELETE"
            })
                .then(response => response.json())
                .then(result => {
                    if (result.status === 200) {
                        showToast(result.message, "success");
                        modal.hide();
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    } else {
                        showToast(result.message, "danger");
                    }
                })
                .catch(error => {
                    showToast("Đã xảy ra lỗi, vui lòng thử lại!", "danger");
                    modal.hide();
                });
        };
    }


    function editProductType(button) {
        const productTypeCard = button.closest('.product-type-card');
        const productTypeId = productTypeCard.getAttribute("data-id");
        const productTypeName = productTypeCard.getAttribute("data-name");

        document.getElementById("editProductTypeId").value = productTypeId;
        document.getElementById("editProductTypeIdDisplay").value = productTypeId;
        document.getElementById("editProductTypeName").value = productTypeName;

        new bootstrap.Modal(document.getElementById('editProductTypeModal')).show();
    }

    document.getElementById("editProductTypeForm").addEventListener("submit", async function (event) {
        event.preventDefault();

        const productTypeId = document.getElementById("editProductTypeId").value;
        const productTypeName = document.getElementById("editProductTypeName").value.trim();

        if (!productTypeName) {
            showToast("Vui lòng nhập tên loại sản phẩm!", "danger");
            return;
        }

        try {
            const response = await fetch(`/product-types/update/${productTypeId}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ name: productTypeName })
            });

            const result = await response.json();
            if (result.status === 200) {
                showToast(result.message, "success");
                const modal = bootstrap.Modal.getInstance(document.getElementById('editProductTypeModal'));
                modal.hide();
                setTimeout(() => {
                    location.reload();
                }, 1000);
            } else {
                showToast(result.message, "danger");
            }
        } catch (error) {
            showToast("Đã xảy ra lỗi, vui lòng thử lại!", "danger");
        }
    });


    function showToast(message, type) {
        const toastEl = document.getElementById("toastMessage");
        toastEl.classList.remove("bg-success", "bg-danger");
        toastEl.classList.add(`bg-${type}`);
        toastEl.querySelector(".toast-body").innerText = message;

        const toast = new bootstrap.Toast(toastEl);
        toast.show();
    }
</script>